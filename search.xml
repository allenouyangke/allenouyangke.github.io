<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[《如何有效阅读一本书：超实用笔记读书法》笔记]]></title>
      <url>%2F2018%2F02%2F05%2Fnote-rhydybs%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;本书的作用：指导你用好笔记，经过规划、梳理，学习怎样选书、怎样读书和怎样把书中的内容刻在脑海里并加以活用，然后把这些做法转化为实用、可持续、属于自己的技巧。 前言 “一味读下去”等于没有读 这本书讲了什么内容？你最喜欢书的哪一部分？本书对你有什么影响？它的优点又在哪里？ 从现在开始，认真选择每一本能满足自己需求的书，然后真挚地与每一本书对话，努力从书中学到知识吧。 把书中的知识转化为“智慧” 通过做笔记吸取书中营养 要买什么书？要注意书中的哪个部分？想到什么？ 第一章 用笔记管理读书生活人与书关系的改变者 读书不再是“随随便便”地读，而是带着明确的目的、充满主动性地去真正消化书中的信息，使之称为属于自己的东深入理解书中的要点或思想，并随时拿来参考 选书、购书、读书和活用 如何选书：怎样选择自己真正想读的书 如何购书：怎样买到对自己真正有益的书 如何读书：怎样加深理解、深入思考 如何活用：怎样运用从书中获得的知识 让笔记成为读书时的好伙伴 随想笔记 记下平时的感悟，与日后的选书息息相关。 不需要对这些信息进行分类整理，只要按照时间顺序将他们排列在笔记本上就够了。 购书清单 找真正想读的书。 主动地选择书籍。 各种报道的简报 尽情收录感兴趣的内容。 读书笔记 将读后感转变成文字保存下来。 笔记本即将成为你读书生活的好搭档。 我们不可能预测出“怎样才能遇到想读的书”，所以不要去分类，直接把信息都罗列在笔记本上反而更好。 只要坚持就一定会有效 “好记信不如烂笔头” 将来总有天你能用到的知识储备。 把灵感记录在纸上，让思考书面化，让灵感脱离之前的抽象状态，会更容易将其理解消化，也能促使你把灵感用作创意材料，想用的时候就能信手拈来。 通过笔记养成良好的读书习惯三个窍门 养成习惯 放大读书笔记的作用 创造别具一格的记录方式 完善购书、读书和活用方式 更好的读书体验便可以成就全新的自己。 一般情况下，读一本书需要经过三个步骤： 购书：在实体店或网店购买喜欢的书 读书：普通的读书过程 归档：读后将书归类的过程 本书情况下，读书分为五个阶段： 选书 购书 读书 记录 活用 其实在读这本书之前，我也已经渐渐的摸索到这种方式了，曾经我也是很苦难为何自己毕业后就看书很难入脑了。更多的原因是时间的碎片化和内心的浮躁，导致以往的读书方式已经不适用了 将读书过程结构化&emsp;&emsp; 对于这个概念，我是这样认为的。就是将读书的五个阶段编程你的阅读习惯，唯有成为了习惯，才不至于觉得阅读那么变扭。 把读书相关信息记入同一本笔记 使用同一本笔记本记录所有信息的重要原因——“信息一元化” 一元化的优点 简单易懂，人人都能做到 更容易坚持 自由度高，可自行设置 信息“存在”与同一个地方 直接记录、参考，不易混淆 因为“杂乱无章”，所以更便于活用 在一本写什么都可以的笔记本里，增加关于读书的记录就目前我个人来说，因为使用了macbook，基本这就成为了我的笔记本了，我开始将所有的读书笔记、生活随笔、人生感悟都写入到了macbook中。 《信息管理术》先记录下来，有空去看看。 只要在这里找，就一定能找到；在这里找不到的话，那就是没有。 笔记本一元化技巧 五要点： 可以书写任何内容 按时间顺序书写（只要写上就好） 附上日期 灵活运用速记或略记 可以粘贴 一日一记的日记式写法，会因为偶尔写不出内容而出现空白，这样就会使人产生懈怠感。这两年经常提醒自己要写日记，最初有经常写，但工作一忙就忘记了。现在通过这种方式，或许会好很多。更多时候应该是我的强迫症太过严重，导致我的笔记都没能坚持下来。 日期标记标注年号和日期有多种多样的方式，为了避免混乱，应该尽量统一使用统一方式标记。 速记/略记 速记：速记的窍门就是用较大的字号书写。或者是写一行空一行的方式，笔记本用完了就换嘛。 简写：为了更方便辨识，可以将冗长的表述缩写为字数更加少的短语。 略记：比较常用就是首字母进行缩写。这种方式试过，但是个人用不习惯。 可以粘贴如果没有电脑我可能会使用纸质笔记，但是开始使用macbook开始完全抛弃了纸质笔记本了。加上现在拍照、截图等十分方便，更多时候使用可截图保存即可，google的图床也没有限制容量，只要有VPN爱怎么传就怎么传。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python-django]]></title>
      <url>%2F2018%2F02%2F02%2Fpython-django%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[lvs-keepalived]]></title>
      <url>%2F2018%2F02%2F02%2Flvs-keepalived%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[SVN基础配置和使用]]></title>
      <url>%2F2018%2F02%2F02%2Fsvn-base%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;SVN是Subversion的简称，是一种集中式的版本控制系统。&emsp;&emsp;集中式代码管理的核心是服务器，所有开发者在开始新一天的工作之前必须从服务器获取代码，然后开发，最后解决冲突，提交。所有的版本信息都放在服务器上。 1 SVN工作流程 开始上班：客户端连接到SVN服务器 → 从SVN服务器上下载项目组最新代码，并进入到自己的分支 进行工作：编写代码，每天隔一个小时向服务器自己的分支提交一次代码 快下班了：把自己的分支合并到SVN服务器的主分支上，一天的工作就完成了，并反映给SVN服务器 2 服务器配置&emsp;&emsp;&amp;MAC默认安装了SVN环境，只需要进行配置即可使用了。 创建代码库 12345# 建立SVN目录，进入SVN主目录$ mkdir ./SVN $ cd ./SVN # 创建一个myCode仓库$ svnadmin create mycode 创建完成后，会自动生成相关的配置文件和数据库文件等。 配置用户权限主要修改conf目录下的三个配置文件 svnserve.conf 12345#将下列配置项前面的#和空格都去掉# anon-access = read // 匿名访问的时候为只读，若改为 none 代表禁止匿名访问# auth-access = write# password-db = passwd# authz-db = authz passwd 12345在 [users] 下面添加账号和密码，如：[users]henry = 725cathy = 111roger = 121 authz 123456789101112将不同的用户进行分组，对组中用户进行统一管理[groups]topgroup = henry,cathy说明 henry 和 cathy 都是数据 topgroup 这个组的接下来再进行权限配置，使用 [/] 代表 svn 服务器中的所有资源库[/]@topgroup = rw上面的配置说明 topgroup 这个组中的所有用户对所有资源都有读写 (rw) 权限，组名前面要用 @如果是用户名，不用加 @，比如 roger 这个用户只有读取权限[/]roger = r至于其他的权限设置，可以参考 authz 文件中的其他内容 启动/关闭SVN服务器 12345678# 启动# 启动有两种方式，其中一种都可以svnserve -d -r ./SVN# 或svnserve -d -r ./SVN/myCode# 关闭# 最简单粗暴的办法就是在监控管理器里直接关闭svn进程。 3 客户端配置&emsp;&emsp;人物角色: 项目经理 henry、程序员 cathy、新员工 roger 3.1 初始化导入12345# 命令格式import 源文件路径 服务器URL --username=用户名 --password=密码 -m“注释内容”# 创建henrysvn import /Users/Henry/Desktop/henry svn://localhost/mycode/prj --username=henry --password=725 -m&quot;初始化导入&quot; 3.2 同步远端代码到本地123456# 命令格式svn checkout 服务器URL 本地目# 从SVN服务器上现在代码svn checkout svn://localhost/myCode/prj /Users/Henry/Desktop/cathy --username=cathy --password=111svn checkout svn://localhost/myCode/prj /Users/Henry/Desktop/roger --username=roger --password=121 3.3 提交更新1234# 进入本地目录cd /Users/Henry/Desktop/cathy# 提交更新svn commit --username=cathy --password=111 -m&quot;cathy增加了1&quot; 3.4 更新服务器代码到本地1234# 进入SVN目录cd /Users/Henry/Desktop/roger# 更新SVN update 4 SVN目录结构&emsp;&emsp;有一个很标准的目录结构，是这样的。比如项目是 proj，svn 地址为 svn://proj/，那么标准的 svn 布局是: 12345svn://proj/|+-trunk+-branches+-tags &emsp;&emsp;这是一个标准的布局，trunk 为主开发目录，branches 为分支开发目录，tags为tag 存档目录（不允许修改）。但是具体这几个目录应该如何使 用，svn 并没有明确的规范，更多的还是用户自己的习惯。 对于这几个开发目录，一般的使用方法有两种: 4.1 trunk作为主开发目录的用法&emsp;&emsp;所有的开 发都是基于 trunk 进行开发，当一个版本 / release 开发告一段落（开发、测试、文档、制作安装程序、打包等）结束后，代码 处于冻结状态（人为规定，可以通过 hook 来进行管理）。此时应该基于当前冻结的代码库，打 tag。当下一个版本 / 阶段的开发任务开始，继续在 trunk 进行开发。此时，如果发现了上一个已发行版本（Released Version）有一些 bug，或者一些很急迫的功能要求，而正在开发的版本（Developing Version）无法满足时间要求，这时候就需要在上一个版本上进行修改了。应该基于发行版对应的 tag，做相应的分支（branch）进行开发。例 如，刚刚发布 1.0，正在开发 2.0，此时要在 1.0 的基础上进行 bug 修正。 4.2 trunk作为发布版本目录的用法&emsp;&emsp;在每一个 release 的 branch 中进行 各自的开发，trunk 只做发布使用。这种开发模式当中，trunk 是不承担具体开发任务的，一个版本 / 阶段的开发任务在开始的时候，根据已经 release 的版本做新的开发分支，并且基于这个分支进行开发。 4.3 两种开发模式比较 第一种开发模式（trunk 进行主要开发，集中式）： 优点：管理简单 缺点：当开发的模块比较多，开发人数 / 小团队比较多 的时候，很容易产生冲突而影响对方的开发。因为所有的改动都有可能触碰对方的改动 第二重开发模式（分支进行主要开发，分散式）： 优点：各自开发独立，不容易相互影响。 缺点：管理复杂，merge 的时候很麻烦，容易死人。 5 附录5.1 SVN常用命令123456789101112131415161718192021svn import : 将文件导入到服务器svn checkout: 下载服务器的代码到本地 (简写svn co)svn commit : 将改动的文件提交到服务器 (简写svn ci)svn update : 更新服务器的代码到本地 (简写svn up)svn add : 向本地的版本控制库中添加新文件svn delete : 从本地的版本控制库中删除文件 (简写svn del)svn remove : 从本地的版本控制库中删除文件(简写svn rm)svn move : 移动文件或者目录或文件更名svn mkdir : 创建纳入版本控制下的新目录svn revert : 撤销之前的一切修改svn merge : 将两个版本之间的差异合并到当前文件svn info : 查看文件的详细信息svn diff : 查看不同版本的区别svn log : 查看日志信息svn list : 列出版本库下的文件和目录列表svn status : 查看文件状态（简写svn st）svn help : 获取帮助信息（比如svn help ci）svn lock : 加锁svn unlock : 解锁更多命令，使用svn help 进行查看svn help [命令] // 可以查看命令帮助 5.2 SVN文件状态标识123456789101112使用文件状态命令 svn st 查看文件状态时的标识&apos; &apos; 没有修改&apos;A&apos; 被添加到本地代码仓库&apos;C&apos; 冲突&apos;D&apos; 被删除&apos;I&apos; 被忽略&apos;M&apos; 被修改&apos;R&apos; 被替换&apos;X&apos; 外部定义创建的版本目录&apos;?&apos; 文件没有被添加到本地版本库内&apos;!&apos; 文件丢失或者不完整（不是通过svn命令删除的文件）&apos;~&apos; 受控文件被其他文件阻隔 阅读原文]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PHP版本升级]]></title>
      <url>%2F2018%2F01%2F31%2Fphp-uprage%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;最近看到了关于PHP的CVE-2018-5711的漏洞。它能用一张GIF图片就可导致服务器发生崩溃直至宕机，在现实中非常容易利用。&emsp;&emsp;由于目前线上使用LAMP/LNMP的服务器较多，拿了一台虚拟机做了测试，并通过升级PHP版本修复了相关的漏洞。&emsp;&emsp;关于PHP的CVE-2018-5711漏洞，详细情况情况相关链接。 1 漏洞测试1.1 检测是否安装php-gd库123456# 查看是否安装了gd[root@KE_02 ~]# php -m | grep -i gdgd# 如未安装，则使用yum安装php-gd[root@KE_02 ~]# yum install php-gd -y 1.2 生成恶意gif文件12345[root@KE_02 ~]# curl -L https://git.io/vN0n4 | xxd -r &gt; poc.gif[root@KE_02 ~]# ll *gif-rw-r--r-- 1 root root 1731 1月 31 15:18 poc.gif# 使用top查看CPU的使用率，未执行代码前CPU使用率是很低的 1.3 测试恶意代码12# 执行恶意代码php -r &apos;imagecreatefromgif(&quot;poc.gif&quot;);&apos; 1.4 该漏洞影响版本1234PHP 5 &lt; 5.6.33PHP 7.0 &lt; 7.0.27PHP 7.1 &lt; 7.1.13PHP 7.2 &lt; 7.2.1 2 漏洞修复&emsp;&emsp;该漏洞的修复方式就是将已有的PHP进行升级。 2.1 卸载已有PHP123yum remove php* -y注意：对于线上环境运行上面的命令时候，确保机器没有对外提供业务，否则执行后会导致业务异常。 2.2 安装Remi的YUM源&emsp;&emsp;Remi repository是包含最新版本 PHP 和 MySQL 包的 Linux 源，由 Remi 提供维护。有个这个源之后，使用 YUM 安装或更新 PHP、MySQL、phpMyAdmin 等服务器相关程序的时候就非常方便了。 1234567CentOS 6 Yum源：# rpm -Uvh http://ftp.iij.ad.jp/pub/linux/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm# rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpmCentOS 7 Yum源:# yum install epel-release# rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm 2.3 查看可安装的软件包123# yum list --enablerepo=remi --enablerepo=remi-php56 | grep php 注意：上面命令中--enablerepo=指定了你要安装查看的PHP版本，目前remi可以安装的PHP范围为5.4-7.2，所以假设你要查看或者安装5.7版本的PHP，可以将上面的--enablerepo=remi-php56换成--enablerepo=remi-php57即可 2.4 安装PHP5.6123# yum install --enablerepo=remi --enablerepo=remi-php56 php php-opcache php-devel php-mbstring php-mcrypt php-mysqlnd 注意：如上面的步骤3所说，如果你要安装PHP 5.5 、5.7等以后版本，请将上面命令中的--enablerepo=remi-php56换成相应的版本。 2.5 查看安装后的版本12345[root@KE_02 ~]# php -versionPHP 5.6.33 (cli) (built: Jan 3 2018 13:11:40)Copyright (c) 1997-2016 The PHP GroupZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies 2.6 升级后再测试&emsp;&emsp;再次执行恶意代码后就会显示报错。 3 参考资料一张动图宕掉一台服务器！运维这个腊月又要忙了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[禅道迁移/升级/备份]]></title>
      <url>%2F2018%2F01%2F29%2Fzentao%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;最初技术中心的禅道系统是部署在windows系统上，由于运维的部门调整，现在要将禅道重新归属于运维部去管理。为了方便统一管理和操作，需要将禅道系统迁移到运维熟悉的CentOS服务器上。通过相关资料和视频的知道，基本确定了“windows to linux”的迁移方式和事项。&emsp;&emsp;根据上一篇在虚拟机中多加载了一块磁盘分区后，现在需要将禅道的系统迁移到该服务器上。&emsp;&emsp;官方迁移指导视频 1 迁移的条件 禅道版本：8.1.3 迁移所需的数据文件： 数据库文件：../xampp/mysql/data/zentao 数据文件：../xampp/zentao/www/data/upliad/1 2 禅道迁移2.1 部署8.1.3 在CentOS系统上部署与windows系统一样的8.1.3版本的禅道软件 1234567891011121314[root@KE_03 opt]# cd /opt[root@KE_03 opt]# wget http://dl.cnezsoft.com/zentao/8.1.3/ZenTaoPMS.8.1.3.zbox_64.tar.gz[root@KE_03 opt]# ll总用量 31124drwx------ 2 root root 16384 1月 18 22:39 lost+found-rw-r--r-- 1 root root 31851357 3月 23 2016 ZenTaoPMS.8.1.3.zbox_64.tar.gz[root@KE_03 opt]# tar zxvf ZenTaoPMS.8.1.3.zbox_64.tar.gz[root@KE_03 opt]# cd zbox/[root@KE_03 zbox]# ./zbox startStart Apache successStart Mysql success &emsp;&emsp;安装完成后，在浏览器里直接输入IP地址访问，选择“开源版”，默认账号/密码：”admin/123456”，登录成功后，说明部署已完成。 2.2 数据迁移 在windows对相关数据进行备份 123..\xampp\mysql\data\zentao..\xampp\zentao\www\data\upload\1 将备份的数据上传到linux中已部署好禅道目录下 123456789/opt/zbox/data/mysql/zentao/opt/zbox/app/zentao/www/data/upload/1# 重启zentaocd /opt/./zbox restart# 至此，迁移就完成了。 禅道常用命令 123456789101112cd /opt/# 启动./zbox start# 关闭./zbox stop# 重启./zbox restart# 状态./zbox status 3 禅道升级（官方）&emsp;&emsp;目前，技术中心使用的禅道为开源版8.1.3，为了跟上新版本的步伐。在迁移后，上头上我研究研究如何对禅道进行升级。对于这一块，我在官网上找到了两种方式，过程十分简单粗暴。 3.1 升级步骤 下载所需升级版本的源码包（zip格式）。（注意，不是.tar.gz 的集成运行环境，如果下载这个，会造成数据被覆盖） 解压缩后得到zentaopms文件夹，将zentaopms/下面的所有文件复制到/opt/zbox/app/zentao/下面，覆盖同名文件。 1\cp -rf /opt/zentaoms/* /opt/zbox/app/zentao/ 然后访问http:/ip地址/zentao/upgrade.php，按照页面提示进行升级即可。 不要解压缩成/opt/zbox/app/zentao/zentao。不要将原来的程序移走，再解压缩新的版本，注意是覆盖！ 3.2 注意事项 如果使用的一键安装包版本比较久，升级之后还需要修改下apache的配置文件。 12345cd /opt/zbox/etc/apache修改 httpd.conf文件。AccessFileName .htaccess将.htaccess改为.ztaccess 然后重启apache。 4 禅道备份(官方)4.1 一键安装包备份&emsp;&emsp;如果是一键安装包程序，简单的方法就是直接将整个一键安装包的目录进行备份。玩了完整备份，在备份钱需要将Apache和MySQL服务器停止。 windows一键安装包是备份整个xampp目录 linux一键安装包备份 /opt/zbox/data/mysql/zentao(pro) 和 /opt/zbox/app/zentao(pro) 目录 linux下lampp搭建备份 /opt/lampp/var/mysql/xxxxx (xxxx表示禅道数据库名称，一般默认是zentao) 和 /opt/lampp/htdocs/zentaopms 4.2 手工备份4.2.1 配置文件、代码和附件的备份1234配置文件存放在zentao/config/my.php附件存放在zentao/www/data/目录下面。修改的代码也都放在zentao目录下面。因此备份配置文件、代码和附件的方法就是将整个zentao目录备份即可。 4.2.2 数据库备份 直接备份数据库原始文件 1找到mysql的data目录，windows一般是在mysql安装目录下面。linux则一般是在/var/mysql或者/var/db类似的目录下面。在data目录下面，会有一个zentao的目录，这个zentao目录就是原始的数据库文件，直接复制这个也是可以的。linux下面可能需要注意权限的问题。 通过导出备份文件 1可以使用mysql提供的管理工具，将数据库导出： mysqldump -u xxx -p zentao &gt; zentao.sql，其中的user换成实际的用户。 4.2.3 禅道系统备份 管理员权限登录禅道 在计划任务中添加备份计划 4.2.4 使用禅道自带脚本&emsp;&emsp;从4.0版本开始，官方提供了init.bat和init.sh脚本来初始化各个命令行的维护脚本，其中有一个就是用来备份数据库和附件，名字叫做backup.bat(windows)或者backup.sh(linux)。 &emsp;&emsp;初始化管理脚本先对各个脚本进行初始化操作。然后切换到zentao/bin/目录下面，执行backup.bat或者backup.sh。 windows下面执行backup.bat 12345I:\xampp\zentao\bin&gt;backup.batI:\xampp\zentao\bin&gt;i:\xampp\php\php.exe I:\xampp\zentao\bin\php\backup.phpBackuping database, successfully saved to I:\xampp\zentao/backup/201304/db.20130402.zipBackuping files, successfully saved to I:\xampp\zentao/backup/201304/file.20130402.zip linux下面执行backup.sh 123./backup.shBackuping database, successfully saved to /mnt/data/z/pms/backup/201304/db.20130402.zipBackuping files, successfully saved to /mnt/data/z/pms/backup/201304/file.20130402.zip &emsp;&emsp;备份成功之后，数据库文件和附件分别以日期为名，保存到zentao/backup目录下面。 注意事项：如果mysql服务停止的话，mysql数据是无法备份的。该方式相当于热备。 5 参考资料禅道官方说明]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux挂载新磁盘并进行分区]]></title>
      <url>%2F2018%2F01%2F26%2Flinux-disk%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;由于业务需要，某台DB的磁盘使用满了。刚好使用的那台机子是虚拟机，就直接在ESXi上划了一块磁盘来用。之前没做过，跟着相关教程做一下。顺带将新挂载的盘作为禅道迁移的服务器。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131# 查看现有的磁盘分区[root@KE_03 ~]# fdisk -lDisk /dev/sda: 21.5 GB, 21474836480 bytes255 heads, 63 sectors/track, 2610 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x000f3a29 Device Boot Start End Blocks Id System/dev/sda1 * 1 26 204800 83 LinuxPartition 1 does not end on cylinder boundary./dev/sda2 26 1332 10485760 83 Linux/dev/sda3 1332 2479 9216000 83 Linux/dev/sda4 2479 2611 1063936 5 Extended/dev/sda5 2479 2610 1048576 82 Linux swap / SolarisDisk /dev/sdb: 42.9 GB, 42949672960 bytes255 heads, 63 sectors/track, 5221 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000[root@KE_03 ~]# cd /opt[root@KE_03 opt]# ls[root@KE_03 opt]# ll总用量 0# 查看分区文件[root@KE_03 opt]# ll /dev/disk/by-by-label/ by-path/ by-uuid/[root@KE_03 opt]# ll /dev/disk/by-path/总用量 0lrwxrwxrwx 1 root root 9 1月 18 22:19 pci-0000:00:07.1-scsi-1:0:0:0 -&gt; ../../sr0lrwxrwxrwx 1 root root 9 1月 18 22:19 pci-0000:00:10.0-scsi-0:0:0:0 -&gt; ../../sdalrwxrwxrwx 1 root root 10 1月 18 22:19 pci-0000:00:10.0-scsi-0:0:0:0-part1 -&gt; ../../sda1lrwxrwxrwx 1 root root 10 1月 18 22:19 pci-0000:00:10.0-scsi-0:0:0:0-part2 -&gt; ../../sda2lrwxrwxrwx 1 root root 10 1月 18 22:19 pci-0000:00:10.0-scsi-0:0:0:0-part3 -&gt; ../../sda3lrwxrwxrwx 1 root root 10 1月 18 22:19 pci-0000:00:10.0-scsi-0:0:0:0-part4 -&gt; ../../sda4lrwxrwxrwx 1 root root 10 1月 18 22:19 pci-0000:00:10.0-scsi-0:0:0:0-part5 -&gt; ../../sda5lrwxrwxrwx 1 root root 9 1月 18 22:19 pci-0000:00:10.0-scsi-0:0:1:0 -&gt; ../../sdb# 查看已有的磁盘分区[root@KE_03 opt]# df -hFilesystem Size Used Avail Use% Mounted on/dev/sda3 8.7G 1.2G 7.1G 15% /tmpfs 491M 0 491M 0% /dev/shm/dev/sda1 194M 27M 158M 15% /boot/dev/sda2 9.9G 151M 9.2G 2% /export# [root@KE_03 opt]# fdisk /dev/sdbDevice contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0x7f800bb1.Changes will remain in memory only, until you decide to write them.After that, of course, the previous content won&apos;t be recoverable.Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)WARNING: DOS-compatible mode is deprecated. It&apos;s strongly recommended to switch off the mode (command &apos;c&apos;) and change display units to sectors (command &apos;u&apos;).Command (m for help): nCommand action e extended p primary partition (1-4)pPartition number (1-4): 1First cylinder (1-5221, default 1):Using default value 1Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-5221, default 5221):Using default value 5221Command (m for help): pDisk /dev/sdb: 42.9 GB, 42949672960 bytes255 heads, 63 sectors/track, 5221 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x7f800bb1 Device Boot Start End Blocks Id System/dev/sdb1 1 5221 41937651 83 LinuxCommand (m for help): wThe partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks.# [root@KE_03 opt]# mkfs.mkfs.cramfs mkfs.ext2 mkfs.ext3 mkfs.ext4 mkfs.ext4dev# [root@KE_03 opt]# mkfs.ext4 /dev/sdb1mke2fs 1.41.12 (17-May-2010)文件系统标签=操作系统:Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks2621440 inodes, 10484412 blocks524220 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=4294967296320 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000, 7962624正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成This filesystem will be automatically checked every 31 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override.[root@KE_03 opt]# mount /dev/sdbsdb sdb1[root@KE_03 opt]# mount /dev/sdb1 /opt# 将sdb1设置[root@KE_03 opt]# echo &quot;/dev/sdb1 /opt ext4 default 0 0&quot; &gt;&gt; /etc/fstab]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CollabNet Subversion Edge安装部署]]></title>
      <url>%2F2018%2F01%2F25%2Fsubversion-edge%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;对互联网公司而言，SVN的重要性不言而喻。本文选用CollabNet Subversion Edge作为SVN服务端和控制台，以TortoiseSVN作为客户端部署SVN系统。CollabNet Subversion Edge控制台功能十分强大，便于维护管理，且能采用LDAP认证方式，适合部署了内部域控的组织。 1 部署环境1.1 硬件环境 虚拟机配置：2核-2G-20G IP地址：172.60.7.184 1.2 软件环境 JDK CollabNet Subversion Edg TortoiseSVN Client 2 部署SVN服务器2.1 安装JDK在虚拟机中安装从官网下载的最新版本JDK，完成后配置环境变量JAVA_HOME、PATH、CLASSPATH；配置完成后，测试查看JDK版本。成功显示JDK版本，即安装成功。 1234567891011121314151617[root@localhost ~]# tar -xf jdk-8u131-linux-x64.tar.gz[root@localhost ~]# mv jdk1.8.0_131 /usr/local/[root@localhost ~]# cd /usr/local/[root@localhost ~]# ln -s jdk1.8.0_131 jdk[root@localhost ~]# vim /etc/profile&gt;&gt;&gt;&gt;#Java_Homeexport JAVA_HOME=/usr/local/jdkexport CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/libexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH&lt;&lt;&lt;&lt;[root@localhost ~]# source /etc/profile[root@localhost ~]# java -versionjava version &quot;1.8.0_161&quot;Java(TM) SE Runtime Environment (build 1.8.0_161-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode) 2.2 安装CollabNet Subversion Edge12345678910111213141516171819202122232425262728# 安装包位置/usr/local/src/CollabNetSubversionEdge-5.2.2_linux-x86_64.tar.gzcd /usr/local/src/tar xvf CollabNetSubversionEdge-5.2.2_linux-x86_64.tar.gz -C /usr/local/# 创建admin用户，csvn不能使用root用户启动[root@localhost ~]# useradd admin[root@localhost ~]# passwd admin[root@localhost ~]# vim /etc/sudoers&gt;&gt;&gt;&gt;admin ALL=(ALL) NOPASSWD:ALL&lt;&lt;&lt;&lt;# 调整csvn项目的权限和属主/组[root@localhost ~]# mkdir opt &amp;&amp; cd opt[root@localhost ~]# tar -xvf CollabNetSubversionEdge-5.2.0_linux-x86_64.tar.gz [root@localhost ~]# cd csvn[admin@localhost ~]$ sudo chown root:admin /home/admin/opt/csvn/lib/httpd_bind/httpd_bind[admin@localhost ~]$ sudo chmod u+s /home/admin/opt/csvn/lib/httpd_bind/httpd_bind[admin@localhost ~]$ sudo bin/csvn-httpd installDetected RHEL or Fedora: Installing the Subversion Edge Apache Server daemon..[admin@localhost ~]$ sudo -E bin/csvn installDetected RHEL or Fedora:Installing the CSVN Console daemon..Setting RUN_AS_USER to: &apos;admin&apos;. Please edit &apos;../data/conf/csvn.conf&apos; if this needs to be adjustedSetting JAVA_HOME to: &apos;/usr/local/jdk&apos;. Please edit &apos;../data/conf/csvn.conf&apos; if this needs to be adjusted 2.3 启动CSVN服务123456789101112[admin@localhost csvn]$ cd ./bin#启动CSVN[admin@localhost bin]$ ./csvn startStarting CSVN Console......CSVN Console startedWaiting for application to initialize (this may take a minute)............................# 查看CSVN状态[admin@localhost bin]$ ./csvn statusCSVN Console is running: PID:16818, Wrapper:STARTED, Java:STARTED 3 配置管理 默认账号/密码：admin/admin 服务器基础配置 创建项目 创建名test的仓库 创建成功，并列出相关信息和日志等 test仓库权限管理 基础权限设置 访问test仓库测试：http://172.16.7.184/svn/test/ 4 参考资料 Linux系统运维之subversionEdge部署 官方指导文档]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[通过Web高效管理多个项目的SVN仓库(适用于中小型研发团队)]]></title>
      <url>%2F2018%2F01%2F24%2Fsubversion%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;互联网小型公司刚开始启动项目的时候，一般只有一个项目，这个时候，只需要在服务器上部署单库的SVN提供服务即可满足需求，运维人员刚开始只需要在命令行手动配置仓库，新人入职改改passwd和authz配置文件添加账号和权限就能搞定，但随着公司的日益发展壮大，研发队伍越来越壮大，人数越来越多，项目模块化，分布式，SOA服务化，多项目同时研发、测试、发布上线等等，运维人员忙的不可开交，旧法子已经完全不能满足需求了，怎么办呢？本着高效率工作，多玩耍的思想，运维人员要寻求更快更便捷的方法来解决问题，那么一定是服务化的方法了，通过WEB UI的方式管理，点点鼠标可以轻松搞定。&emsp;&emsp;Jsvnadmin的出现，就改变了以往纯命令行或脚本的原始化方法，它是一个 Java 开发的管理 Svn 服务器的项目用户的 web 应用。安装好 Svn 服务器端好，把 Svn Admin 部署好，就可以通过 web 浏览器管理 Svn 的项目，管理项目的用户，管理项目的权限。使得管理配置 Svn 简便，再也不需要每次都到服务器手工修改配置文件。 1 jsvnadmin简介1.1 软件优点 多数据库：SVN项目配置数据保存在数据库，支持所有数据库（默认MySQL/Oracle/SQL Server） 多操作系统：支持Windows，Linux等操作系统给 权限控制：管理员可以随意分配权限、项目管理员可以管理项目成员、成员只能查看和修改自己的密码 支持多项目、多用户、多用户组Group：默认带有“项目管理组”、“项目开发组”、“项目测试组” 安全：密码加密保存 多协议：支持svn协议和httpd协议（从2.0开始支持Apache服务器——单库方式，从3.0开始支持Apache多库方式） 仓库浏览：从3.0.2开始 多语言：从3.0.2开始 1.2 部署方案 方案1 Linux+Apache+Subversion+MySQL+Tomcat+Svnadmin 方案2 Windows+Apache+Subversion+MySQL+Tomcat+Svnadmin 支持SVN协议 Svn 的配置信息都在仓库目录的 conf 下的 authz,passwd,svnserve.conf 三个文件中，配置用户和权限都是通过修改 passwd 和 authz，立刻就生效。 Svn Admin 的本质是对这 3个文件进行管理，所有成员、权限的数据都保存在数据库中， 一旦在Svn Admin 的页面上修改，就会把配置信息输出到 conf 下的那 3 个配置文件中。 支持Http协议 Apache+SVN 配置成功后可以有两种方式 多库方式： SVNParentPath 指定一个父目录，所有仓库在这个父目录下，使用一个密码文件和一个权限配置文件。优点是增加删除仓库不需要改 apache的 httpd.conf，不需要重启 Apache。缺点是项目多会很混乱。 单库方式： SVNPath 每个仓库单独配置各自的密码和权限文件。优点是各自分开，互相不影响，维护方便。缺点是增加或删除仓库需要修改 apache 的httpd.conf 后重启。 2 初始化系统2.1 升级系统软件包1yum -y update 2.2 关闭SELinux1234vim /etc/sysconfig/selinux# 修改为SELINUX=disabled 2.3 安装基础依赖包1234yum install gcc gcc-c++ ntpdate wget -y# 重启服务器reboot 3 部署Apache3.1 安装Apache1yum install httpd httpd-devel -y 3.2 调整配置文件1234vim /etc/httpd/conf/httpd.conf# 大概在276行276 ServerName localhost:80 3.3 设置Apache服务12345# 设置开机自动启动chkconfig httpd on# 启动httpdservide httpd start 3.4 调整防火墙规则123456vim /etc/sysconfig/iptables# 允许80端口访问-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPTservice iptables restart 4 部署Subversion4.1 安装SVN12345# mod_dav_svn是与httpd相关的svn模块，必须安装yum install subversion mod_dav_svn -y# 重启apache，让模块重新加载service httpd restart 4.2 检查Apache的svn模块1234ls /etc/httpd/modules/ | grep svnmod_authz_svn.somod_dav_svn.so 4.3 查看SVN版本123[root@localhost ~]# svn --versionsvn，版本 1.6.11 (r934486) 编译于 Aug 17 2015，08:37:43 4.4 配置SVN仓库4.4.1 创建SVN主库目录多库模式，一份配置文件管理多个库 1mkdir -p /data/svn 4.4.2 编辑配置文件subversion.conf123456789101112131415[root@localhost conf.d]# cd /etc/httpd/conf.d/ &amp;&amp; lsphp.conf README subversion.conf welcome.conf[root@localhost conf.d]# tail -12 subversion.conf &lt;Location /svn/&gt; DAV svn SVNListParentPath on SVNParentPath /data/svn AuthType Basic AuthName &quot;Subversion repositories&quot; AuthUserFile /data/svn/passwd.http AuthzSVNAccessFile /data/svn/authz Require valid-user &lt;/Location&gt; RedirectMatch ^(/svn)$ $1/ 4.4.3 创建主库文件12345678# 登录验证及权限管理touch /data/svn/authz# 用户和密码管理touch /data/svn/passwd.http# 重启Apache，加载相关模块和文件service httpd restart 5 部署MySQL5.1 安装MySQL123456789101112# 直接使用yum安装服务端、客户端和依赖包yum -y install mysql-server mysql mysql-devel# 设置开机自动启动chkconfig mysqld on# 添加防火墙规则vim /etc/sysconfig/iptables-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPTservice iptables restart 5.2 设置MySQL权限12345678910111213# 修改mysql的root密码mysqladmin -u root password &apos;mypassword&apos;# 授权root账户远程访问mysqlmysql -u root -pmypasswordmysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;Query OK, 0 rows affected (0.00 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; exit 6 部署Tomcat6.1 安装JDK123456# 下载jdk源码包wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz -P /usr/local/src/# 解压安装包cd /usr/local/src/tar zxvf jdk-8u161-linux-x64.tar.gz -C /usr/local/ 6.2 配置环境变量1234567891011121314151617vim /etc/profile# Java_HomeJAVA_HOME=/usr/local/jdk1.8.0_161JRE_HOME=/usr/local/jdk1.8.0_161/jrePATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binCLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport JAVA_HOME JRE_HOME PATH CLASSPATH# 立即生效source /etc/profile# 检验是否生效java -versionjava version &quot;1.8.0_161&quot;Java(TM) SE Runtime Environment (build 1.8.0_161-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode) 6.3 安装Tomcat1234567# 下载Tomcat源码包wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.82/bin/apache-tomcat-7.0.82.tar.gz# 解压安装包tar -zxvf apache-tomcat-7.0.82.tar.gz -C /usr/local/cd /usr/local/mv apache-tomcat-7.0.82 svnadmin-tomcat 6.4 调整Tomcat配置1234567891011121314# 末尾增加URIEncoding参数为UTF-8vim /usr/local/src/svnadmin-tomcat/conf/server.xml 22 &lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;71 &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;72 connectionTimeout=&quot;20000&quot;73 redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot;/&gt;# 添加防火墙规则vim /etc/sysconfig/iptables-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPTservice iptables restart 7 部署jsvnadmin7.1 安装jsvnadmin1234567wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jsvnadmin/svnadmin-3.0.5.zip -P /usr/local/srccd /usr/local/src/unzip svnadmin-3.0.5.zip -d svnadmincd svnadmin 7.2 部署svnadmin项目文件1234567891011121314rm -rf /usr/local/svnadmin-tomcat/webapps/*unzip svnadmin.war -d /usr/local/svnadmin-tomcat/webapps/svnadmin# 修改相关配置文件vim /usr/local/svn-tomcat/webapps/svnadmin/WEB-INF/jdbc.properties db=MySQL#MySQLMySQL.jdbc.driver=com.mysql.jdbc.DriverMySQL.jdbc.url=jdbc:mysql://127.0.0.1:3306/svnadmin?characterEncoding=utf-8MySQL.jdbc.username=rootMySQL.jdbc.password=mypassword 7.3 初始化svnadmin数据库7.3.1 创建svnadmin数据库1234567891011121314151617mysql -u root -pmysql&gt; CREATE DATABASE svnadmin CHARACTER SET utf8;Query OK, 1 row affected (0.00 sec)mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || svnadmin || test |+--------------------+4 rows in set (0.00 sec)mysql&gt; exitBye 7.3.2 导入sql文件12mysql -u root -p svnadmin &lt; /usr/local/src/svnadmin/db/mysql5.sql mysql -u root -p svnadmin &lt; /usr/local/src/svnadmin/db/lang/en.sql 7.3.3 启动tomcat服务12345678cd /usr/local/tomcat/sh bin/startup.shUsing CATALINA_BASE: /usr/local/tomcatUsing CATALINA_HOME: /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME: /usr/local/jdk1.8.0_121/jreUsing CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar 8 参考资料 如何通过Web高效管理多个项目的SVN仓库（适用于中小型研发团队） Centos 6.* 部署subversion 集成 svnadmin WEB管理界面]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python之Fabric模块]]></title>
      <url>%2F2017%2F12%2F27%2Ffabcir%2F</url>
      <content type="text"><![CDATA[&emsp;&emsp;Fabric是基于Python实现的SSH命令行工具，简化了SSH的应用程序部署及系统管理任务，它提供了系统基础的操作组件，可以实现本地或远程shell命令，包括：命令执行、文件上传、下载及完整执行日志输出等功能。Fabric在Paramiko的基础上做了更高一层的封装，操作起来会更加简单。&emsp;&emsp;目前作为游戏运维人员，在没有完全做好自动化运维的情况下，使用fabcir能有效的提高工作效率。 1 命令说明1.1 命令格式fab [options] &lt;command&gt;[:arg1,arg2=val2,host=foo,hosts=&#39;h1;h2&#39;,...] ... 1.2 常用参数Fabric能够加载Python模块(如：fabfile.py)和包(fabfile/)，默认情况下，会根据Python包的导入机制加载fabile。可以是fabfile/或fabfile.py 12345678910-l #显示定义好的任务函数名，即显示可用的task-f #指定fab入口文件，默认入口文件名为fabfile.py-f #指定网关（中转）设备，比如堡垒机环境，填写堡垒机IP即可-H #指定目标主机，多台主机用‘,’号分隔-p #远程账号的密码，fab执行时默认使用root账户-P #以异步并行方式运行多主机任务，默认为串行运行-R #指定role（角色），以角色名区分不同业务组设备-t #设置设备连接超时时间（秒）-T #设置远程主机命令执行超时时间（秒）-w #当命令执行失败，发出警告，而非默认中止任务；warn_only，默认为遇到异常直接放弃执行并退出 2 简单实例vim /root/fabfile.pyfab命令执行时，如果没有指定fab文件，默认会在当前目录下寻找fabfile.py文件。 该实例等同于：fab -p 123456 -H localhost -- &#39;uname -s&#39; #--后面要加空格 12345678#!/usr/bin/env python# -*- coding:utf-8 -*-from fabric.api import run#定义一个任务函数，通过run方法实现远程执行‘uname -s’命令def host_type(): run('uname -s') 1234567891011fab -H localhost host_type #结果：[localhost] Executing task &apos;host_type&apos;[localhost] run: uname -s[localhost] Login password for &apos;root&apos;: [localhost] out: Linux[localhost] out: Done.Disconnecting from localhost... done. 3 fabfile文件编写fab命令是结合fabfile.py文件（其他文件通过-f filename参数来引用）来搭配使用的。fab的部分命令行参数还能通过相应的方法来代替。 123456fab -H 192.168.1.1,192.168.1.2 ... ...#可以在fabfile.py文件中用env.hosts来实现，命令行中就可以不用写了#可以在fabfile中这么写：env.hosts = ['192.168.1.1','192.168.1.2'] 3.1 fabcir之env对象env对象的作用是定义了fabfile的全局设定。 1234567891011env.hosts #定义目标主机，可以用IP或主机名表示，以python的列表形式定义。如env.hosts=['192.168.1.21','192.168.1.22']env.exclude_hosts #排除指定主机，如env.exclude_hosts=['192.168.1.21']env.all_hosts #default为[]，由fab设置的当前正在执行命令的主机列表。仅用于显示信息。env.user #定义用户名，如env.user='root'env.port #定义端口，默认为22，如env.port='22'env.password #定义密码，如env.password='123456'env.passwords #定义多个密码，不同主机对应不同密码，如：env.passwords = &#123;'root@192.168.1.21:22':'123456','root@192.168.1.22:22':'654321'&#125;env.gateway #定义网关（中转、堡垒机）IP，如env.gateway='192.168.1.23env.roledefs #定义角色分组，比如web组合db组主机区分开来：env.roledefs = &#123;'webserver':['192.168.1.21','192.168.1.22'],'dbserver':['192.168.1.25','192.168.1.26']&#125;env.deploy_release_dir #自定义全局变量，格式：env. + '变量名称'，如env.age,env.sex等env.parallel #全局并行参数，例：env.parallel=True 3.2 env.roledefs使用实例123456789env.roledefs = &#123;'webserver':['192.168.1.21','192.168.1.22'],'dbserver':['192.168.1.25','192.168.1.26']&#125;#引用分组时使用python装饰器方式来进行,如：@roles('webserver')def webtask(): run('/usr/local/nginx/sbin/nginx')@roles('webserver','dbserver')def publictask(): run('uptime') 4 fabric常用API4.1 API1234567891011local #执行本地命令，如local('uname -s')lcd #切换本地目录，如lcd('/home')cd #切换远程目录run #执行远程命令sudo #sudo方式执行远程命令，如sudo('/etc/init.d/httpd start')put #上次本地文件导远程主机，如put('/home/user.info','/data/user.info')get #从远程主机下载文件到本地，如：get('/data/user.info','/home/user.info')prompt #获得用户输入信息，如：prompt('please input user password:')confirm #获得提示信息确认，如：confirm('Test failed,Continue[Y/N]?')reboot #重启远程主机，如：reboot()abort #用于手动停止任务执行 4.2 修饰器fabric.decorators.host(*host_list)中所有的装饰器 123456@host('user1@host1', 'host2', 'user2@host3') #定义按主机来执行@roles('webserver','dbserver') #定义按角色分组来执行@task #函数修饰符，标识的函数为fab可调用的，非标记对fab不可见，纯业务逻辑@runs_once #函数修饰符，标识的函数只会执行一次，不受多台主机影响，runs_once无法和任务并行执行同时生效@parallel和@serial #任务并行/串行执行；并行优先级高于串行@with_settings(warn_only=True) #warn_only表示是否当在远程机器上执行命令，出现错误时，fabric是否退出。将整个函数封装起来，其效果类似于执行在 settings 上下文管理器中。如果你想要修改函数的设置，但不愿改动其缩进时，它会很有用。 5 fabcir应用实例说明5.1 查看本地和远程主机信息12345678910111213141516#!/usr/bin/env python# -*- encoding: utf-8 -*-from fabric.api import *env.user = 'root'env.hosts = ['172.16.7.182']env.password = 'Efun@166'@runs_once #查看本地系统信息，当有多台主机时只运行一次def local_task(): #本地任务函数 local('uname -a') def remote_task(): with cd('/root/'): #with的作用是让后面的表达式语句继承当前状态，实现：cd /var/logs &amp;&amp; ls -l的效果 run('ls -l') 5.2 动态获取远程目录列表调用@task修饰符标志入口函数go()对外部可见，配合@runs_once修饰符接收用户输入，最后调用worktask()函数实现远程命令执行。 123456789101112131415#!/usr/bin/env python# -*- encoding: utf-8 -*-from fabric.api import *env.user = 'root'env.hosts = ['172.16.7.182']env.password = 'Efun@166'@runs_once #主机遍历过程中，只有第一台触发此函数def input_raw(): return prompt('please input directoryname:',default='/root')def worktask(dirname): run('ls -l'+' '+dirname)@task #限定只有go函数对fab命令可见,其他没有使用@task标记的函数fab命令不可用def go(): getdirname = input_raw() worktask(getdirname) 5.3 网关模式文件上传与执行通过定义env.gateway网关模式，即俗称的中转、堡垒机环境。通过网关对其他主机进行文件上传和执行。 1234567891011121314151617181920212223242526272829303132333435363738394041#!/usr/bin/env python# -*- encoding: utf-8 -*-from fabric.api import *from fabric.context_managers import *from fabric.contrib.console import confirmenv.user = 'root'env.gateway = '192.168.1.23' #定义堡垒机IP，作为文件上传、执行的中转设置env.hosts = ['192.168.1.21','192.168.1.22']env.passwords = &#123; 'root@192.168.1.21:22':'123456', 'root@192.168.1.22:22':'abcdef', 'root@192.168.1.23:22':'123abc', #堡垒机账号信息&#125;lpackpath = '/home/install/lnmp.tar.gz' #本地安装包路径rpackpath = '/tmp/install' #远程安装包路径@taskdef put_task(): #上传文件 run('mkdir -p /tmp/install') #默认情况下，当命令执行失败时，Fabric会停止执行后续命令。有时，我们允许忽略失败的命令继续执行，比如run(‘rm /tmp/abc')在文件不存在的时候有可能失败，这时可以用with settings(warn_only=True):执行命令，这样Fabric只会打出警告信息而不会中断执行。 with settings(warn_only=True): result = put(lpackpath,rpackpath) #上传 if result.failed and not confirm('put file failed,Continue[Y/N]?'): abort('Aborting file put task!')@taskdef run_task(): #安装 with cd('/tmp/install'): run('tar -zxvf lnmp.tar.gz') with cd('lnmp/'): #使用with继承/tmp/install目录位置状态 run('./centos.sh')@taskdef go(): #上传、安装组合命令 put_task() run_task()]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Execl常用操作分享]]></title>
      <url>%2F2017%2F12%2F21%2Fexecl-share%2F</url>
      <content type="text"><![CDATA[一、常用操作1 拆分数据 数据→分列 2 数据透视 汇总数据插入→数据透视表 自定义数据数据→数据验证→数据验证 筛选统计数据→筛选 3 表格保护 冻结窗格视图→冻结窗格 保护表格 全局保护审阅→保护工作表/薄 条件保护审阅→允许编辑区域 4 批量操作工作表shift + 需要编辑的工作表可以自由的增删改 5 背景填充 自由填充 条件格式开始→条件格式 填充色替换选中特定区域→Ctrl + F→选中格式→替换格式 二、常用函数1 时间函数 TODAY/NOW/YEAR/MONTH/DAY/WEEKDAY DATEIF 2 统计函数 SUM/SUMIF COUNT/COUNTA/COUNTBLANK 3 逻辑函数 AND/OR 4 文本处理函数 FIND/SEARCH offset作用：设置参照物应用：动态获取最后一行的数据内容 三、案例演示]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Atom快捷键和常用插件]]></title>
      <url>%2F2017%2F12%2F02%2FAtom%2F</url>
      <content type="text"><![CDATA[1 文件切换ctrl-shift-s 保存所有打开的文件cmd-shift-o 打开目录cmd-\ 显示或隐藏目录树ctrl-0 焦点移到目录树目录树下，使用a，m，delete来增加，修改和删除cmd-t或cmd-p 查找文件cmd-b 在打开的文件之间切换cmd-shift-b 只搜索从上次git commit后修改或者新增的文件 2 导航（等价于上下左右）ctrl-p 前一行ctrl-n 后一行ctrl-f 前一个字符ctrl-b 后一个字符 alt-B, alt-left 移动到单词开始alt-F, alt-right 移动到单词末尾 cmd-right, ctrl-E 移动到一行结束cmd-left, ctrl-A 移动到一行开始 cmd-up 移动到文件开始cmd-down 移动到文件结束 ctrl-g 移动到指定行 row:column 处 cmd-r 在方法之间跳转 3 目录树操作cmd-\ 或者 cmd-k cmd-b 显示(隐藏)目录树ctrl-0 焦点切换到目录树(再按一次或者Esc退出目录树)a 添加文件d 将当前文件另存为(duplicate)i 显示(隐藏)版本控制忽略的文件alt-right 和 alt-left 展开(隐藏)所有目录ctrl-al-] 和 ctrl-al-[ 同上ctrl-[ 和 ctrl-] 展开(隐藏)当前目录ctrl-f 和 ctrl-b 同上cmd-k h 或者 cmd-k left 在左半视图中打开文件cmd-k j 或者 cmd-k down 在下半视图中打开文件cmd-k k 或者 cmd-k up 在上半视图中打开文件cmd-k l 或者 cmd-k right 在右半视图中打开文件ctrl-shift-C 复制当前文件绝对路径 4 书签cmd-F2 在本行增加书签F2 跳到当前文件的下一条书签shift-F2 跳到当前文件的上一条书签ctrl-F2 列出当前工程所有书签 选取 大部分和导航一致，只不过加上shift ctrl-shift-P 选取至上一行ctrl-shift-N 选取至下一样ctrl-shift-B 选取至前一个字符ctrl-shift-F 选取至后一个字符alt-shift-B, alt-shift-left 选取至字符开始alt-shift-F, alt-shift-right 选取至字符结束ctrl-shift-E, cmd-shift-right 选取至本行结束ctrl-shift-A, cmd-shift-left 选取至本行开始cmd-shift-up 选取至文件开始cmd-shift-down 选取至文件结尾cmd-A 全选cmd-L 选取一行，继续按回选取下一行ctrl-shift-W 选取当前单词 5 编辑和删除文本5.1 基本操作ctrl-T 使光标前后字符交换cmd-J 将下一行与当前行合并ctrl-cmd-up, ctrl-cmd-down 使当前行向上或者向下移动cmd-shift-D 复制当前行到下一行cmd-K, cmd-U 使当前字符大写cmd-K, cmd-L 使当前字符小写cmd-shift-P 搜索命令 5.2 删除和剪切ctrl-shift-K 删除当前行cmd-backspace 删除到当前行开始cmd-fn-backspace 删除到当前行结束ctrl-K 剪切到当前行结束alt-backspace 或 alt-H 删除到当前单词开始alt-delete 或 alt-D 删除到当前单词结束 5.3 多光标和多处选取cmd-click 增加新光标cmd-shift-L 将多行选取改为多行光标ctrl-shift-up, ctrl-shift-down 增加上（下）一行光标cmd-D 选取文档中和当前单词相同的下一处ctrl-cmd-G 选取文档中所有和当前光标单词相同的位置 5.4 括号跳转ctrl-m 相应括号之间，html tag之间等跳转ctrl-cmd-m 括号(tag)之间文本选取alt-cmd-. 关闭当前XML/HTML tag 5.5 编码方式ctrl-shift-U 调出切换编码选项 6 查找和替换cmd-F 在buffer中查找cmd-shift-f 在整个工程中查找 7 代码片段alt-shift-S 查看当前可用代码片段 在~/.atom目录下snippets.cson文件中存放了你定制的snippets 定制说明 8 自动补全ctrl-space 提示补全信息 9 折叠alt-cmd-[ 折叠alt-cmd-] 展开alt-cmd-shift-{ 折叠全部alt-cmd-shift-} 展开全部cmd-k cmd-N 指定折叠层级 N为层级数 10 文件语法高亮ctrl-shift-L 选择文本类型 11 使用Atom进行写作ctrl-shift-M Markdown预览可用代码片段 b, legal, img, l, i, code, t, table 12 git操作cmd-alt-Z checkout HEAD 版本cmd-shift-B 弹出untracked 和 modified文件列表alt-g down alt-g up 在修改处跳转alt-G D 弹出diff列表alt-G O 在github上打开文件alt-G G 在github上打开项目地址alt-G B 在github上打开文件blamealt-G H 在github上打开文件historyalt-G I 在github上打开issuesalt-G R 在github打开分支比较alt-G C 拷贝当前文件在gihub上的网址 13 推荐一些好用的插件 主题atom-material-ui 好看到爆atom-material-syntax 美化atom-beautify 一键代码美化file-icons 给文件加上好看的图标atom-minimap 方便美观的缩略滚动图pretty-json json格式化工具activate-power-mode 炫酷的打字特效 gitatomatigit 可视化git操作git-time-machine git版本对比工具，可视化选择每一个commitmerge-conflicts 合并冲突可视化工具 代码提示emmet 这个不用介绍了吧atom-ternjs js代码提示很强大，高度定制化docblockr jsdoc 给js添加注释autoclose-html 闭合html标签color-picker 取色器 必备插件pigments 颜色显示插件 必装terminal-panel 直接在atom里面写命令了svg-preview svg预览 便捷操作advanced-open-file 快速打开、切换文件project-folder 快速打开、切换项目script 立即执行当前js文件 高亮language-vue vue框架代码高亮 终端platformio-atom-ide-terminal 终端插件，支持显示、隐藏及多窗口]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《HTML5、CSS和JavaScript开发》笔记之HTML]]></title>
      <url>%2F2017%2F11%2F30%2FHTML%2F</url>
      <content type="text"><![CDATA[第一章 HTML语言简介1.1 什么是HTML HTML(the Hypertext Markup Language，超文本标记语言)是用于描述网页内容结构的语言。 HTML的作用： 发布包含标题、文本、表格、列表、图片的在线文档。 通过单击超链接进行网页间的跳转。 设计表单将用户输入的内容提交给服务器进行处理。 可以嵌入声音、视频等多媒体内容。 1.2 什么是HTTP HTTP(Hypertext Transfer Protocol，超文本传输协议)是互联网上应用最为广泛的一 种网络协议，它规范了通过网络请求与接收 HTML 页面的方法。 HTTP 将一次用户浏览网页的过程定义为一次客户端与服务器端的交互。 1.3 什么是浏览器 浏览器(browser)属于万维网的客户端程序，用于向服务器发送 HTTP 请求，接收服 务器的 HTTP 响应，解析 HTML 网页内容并呈现给用户。 主流浏览器： 微软公司的Internet Explorer IE浏览器采用微软研发的Trident内核，只能运行在Windown操作系统中。 Mozilla Firefox 采用Gecko内核，能够运行在 Windows、Linux 等多种主流操作系统中。 Google 公司的 Chrome Chrome采用了苹果公司的Webkit内核，此内核也广泛用于移动设备的浏览器中。 苹果公司的 Safari Opera 挪威欧普拉软件公司推出的浏览器，采用自行研制的Presto内核，Opera浏览器支持多种操作系统，还有针对手机的移动版本等，可以说是面向平台最广泛的浏览器。 1.4 HTML文档类型 DTD(Document Type Definition，文档类型定义)1，是用来定义XML文档结构的(HTML可以看成是XML的一种应用，其DTD作为标准而固定下来了)，对XML文档中元素和属性的使用规则及相互关系作出了定义。 HTML4.01指定了3个DTD： &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;严格的 DTD，遵循这种 DTD，表明页面中不会使用废弃的元素和属性，也不会使 用框架。 &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;松散的 DTD，遵循这种 DTD，表明页面中可能会使用废弃的元素和属性，但不会使用 框架。 &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;框架 DTD，遵循这种 DTD，表明页面中可能会使用废弃的元素和属性，以及框架 1.5 HTML文档结构 学习 HTML 语言的重点就是掌握 HTML 元素及其属性的作用。 HTML 标记(markup)和标签并不是同义的，HTML 标记包括开始标签 (tag)、结束标签、空元素标签、实体引用、字符引用、注释、文档类型声明等。 基本结构 123456&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; &lt;title&gt;元素：指定页面的标题，标题会出现在浏览器的标题栏中，如果通过浏 览器收藏本页面，页面标题也会作为收藏夹中页面的名称。 12345678&lt;html&gt; &lt;head&gt; &lt;title&gt;页面标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 这是一段注释 --&gt; 这是在 HTML 中显示的文本。 注意:浏览器遇到连续的空格或换行时只会在页面上显示一个空格 &lt;/body&gt;&lt;/html&gt; 两种字符引用 共性：在和号(&amp;) 之后写上字符的助记符。 字符引用：需要在和号(&amp;)之后加上一个井号(#)，之后是所需字符的十进制代码或 十六进制代码(ISO10646 字符集中字符的编码)。 实体引用：在和号(&amp;) 之后写上字符的助记符。 实例代码1234567&lt;html&gt; &lt;head&gt; &lt;title&gt;页面标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HTML 中标题元素为&amp;lt;title&amp;gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;所有的转义字符都以&amp;amp;符号作为开始 &lt;/body&gt;&lt;/html&gt; 指定字符编码格式：&lt;meta http-equiv=&quot;Content- Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; GB2312和GBK均为简体中文的编码 BIG5为繁体中文编码 ISO-8859-1 为英文编码 UTF-8 编码为比较通用的字符集，可以容纳世界上大多数的语言文字，使用UTF-8作为网页的编码格式可以让网页具有较高的通用性 1.6 基本元素1.6.1 页面信息元素&lt;meta&gt; 页面信息元素可提供有关页面的元信息(Meta-Information)，比如针对搜索引擎提供 的页面描述和关键词、指定页面编码等。该元素应该出现在元素内部。 常用属性： http-equiv：设置本页面有关的信息，需要与content属性配合使用。 123456&lt;!--指定页面文本编码格式--&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;&lt;!--页面显示5s后跳转到google--&gt;&lt;meta http-equiv="Refresh" content="5; Url=http://www.google.com"&gt;&lt;!--缓存页面内容到某个时间，超时后需要重新获取--&gt;&lt;meta http-equiv="Expires" content="Wed, 23 Feb 2011 18:00:00 GMT"&gt; name：描述网页内容，供搜索引擎收录，需要与 content 属性配合使用。 123456&lt;!--设置关键词--&gt;&lt;meta name="Keywords" content="关键词 1,关键词 2,关键词 3,关键词 4,..."&gt;&lt;!--设置网页简述--&gt;&lt;meta name="Description" content="网页简述"&gt;&lt;!--设置网页作者等--&gt;&lt;meta name="Author" content="张三"&gt; 1.6.2 段落元素 段落元素用来表示一段文本，会自动换行。 align属性：设置文字对齐方式，‘left/center/right’1234&lt;p&gt;普通段落&lt;/p&gt;&lt;p align="left"&gt;左对齐段落&lt;/p&gt;&lt;p align="center"&gt;居中段落&lt;/p&gt;&lt;p align="right"&gt;靠右对齐段落&lt;/p&gt; 1.6.3 换行元素&lt;br&gt; 换行元素用于同一段落内文字的换行显示，该元素没有属性，也不包含内容。12345&lt;p&gt; &amp;lt;br&amp;gt;元素可用于段落中文字的换行&lt;br/&gt; 因为浏览器对 HTML 中的换行符并不敏感， 所以这段话在浏览器中会连续显示&lt;/p&gt;&lt;p&gt;段落间的留白比&amp;lt;br&amp;gt;元素更明显&lt;/p&gt; 1.6.4 标题元素&lt;1&gt;&lt;6&gt; 用于将文字变为标题显示123456&lt;h1&gt;一级标题&lt;/h1&gt;&lt;h2&gt;二级标题&lt;/h2&gt;&lt;h3&gt;三级标题&lt;/h3&gt;&lt;h4&gt;四级标题&lt;/h4&gt;&lt;h5&gt;五级标题&lt;/h5&gt;&lt;h6&gt;六级标题&lt;/h6&gt; 1.6.5 文字修饰元素 &lt;b&gt;&lt;i&gt;&lt;u&gt;元素用于修饰文字，作用分别为使文字变粗体、变斜体、加下画线。1234&lt;p&gt;&amp;lt;b&amp;gt;元素使文字变为&lt;b&gt;粗体&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;lt;i&amp;gt;元素使文字变为&lt;i&gt;斜体&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&amp;lt;u&amp;gt;元素为文字添加&lt;u&gt;下画线&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;这些&lt;u&gt;元素&lt;i&gt;可以&lt;/i&gt;组合&lt;/u&gt;使用&lt;/b&gt;&lt;/p&gt; 1.6.6 文字修饰元素 修饰文字的颜色、大小和字体。 1234&lt;p&gt; &amp;lt;font&amp;gt;元素可以修饰文字的&lt;font color="gray"&gt;颜色&lt;/font&gt;, &lt;font size="5"&gt;大小&lt;/font&gt;和&lt;font face="黑体"&gt;字体&lt;/font&gt;&lt;/p&gt;&lt;p&gt;也可以&lt;font color="#B0B0B0" size="6" face="黑体"&gt;组合&lt;/font&gt;使用&lt;/p&gt; 常用属性： color：设置文字的颜色，颜色可以使用英文单词或十六进制的数字指定。 size:设置文字的大小，可选值为 1~7。 face:设置文字的字体。 1.6.7 原样显示元素 原样显示元素用于原样显示文本，包括其中的换行符与连续的空格。12345&lt;pre&gt;用于原样显示文本，包括换行符&lt;/pre&gt;&lt;pre&gt;以及连续 的空格&lt;/pre&gt; 1.6.8 分割线元素 用于显示分割线，可以通过属性设置分割线的外观。 12&lt;p&gt;&amp;lt;hr&amp;gt;元素用于显示分割线&lt;/p&gt;&lt;hr color="red" noshade="noshade" width="400px" align="right" size="1"/&gt; 常用属性： color:设置分割线的颜色。 noshade:设置是否显示阴影，无此属性则显示阴影。 width:设置线的宽度，可以使用百分比或像素作为单位。 align:分隔线的对齐方式，可选值有“left”、“center”、“right”，默认为居中对齐。 size:线的粗细，单位为像素。 1.6.9 其他元素详细请看W3C元素对照表 第二章 超链接、图片及常用元素2.1 超链接元素2.1.1 超链接的基本用法 超链接元素&lt;a&gt;，通过元素的href属性指定跳转的地址。 2.1.2 相对路径与绝对路径 相对路径：以当前文件所在的位置为参考点而建立的路径。 绝对路径：以硬盘根目录或站点根目录为参考点而建立的路径。 一般而言，在引用其他文件时建议使用相对路径，当站点的目录或域名更改时就不用修改链接地址。 2.1.3 target属性 指定目标页面的打开窗口，默认情况下载本浏览器窗口打开（如浏览器支持标签浏览，也能在新的标签页中打开目标页面），可通过target属性实现在新窗口中打开页面等效果。 target 属性含义 _blank 在新浏览器窗口（或新的标签页）中打开目标页面 _self 默认行为，在原浏览器窗口中打开目标页面 _parent 在父亲窗口中打开目标页面 _top 在顶级窗口中打开目标页面 其他值 以为在名为该值得窗口中打开目标页面。如无同名窗口，则新建一个窗口，并以target值命名此窗口，然后打开目标页面；如有同名窗口，则直接在此窗口中打开目标页面。 2.1.4 锚链接 用于跳转到页面的指定部分，对篇幅较长的网页尤其有用。 FAQ（Frequently Asked Questions，“经常问道的问题”或“常见的问题解答”） 锚链接需要通过&lt;a name=&quot;xx&quot;/&gt;的形式为锚命名，并通过&lt;a href=&quot;#xx&quot;&gt;的形式跳转到对应的锚 注意：如果锚链接的地址写错了，浏览器一般不会跳转到错误页面，而是不做反应。 可以通过将href属性谢伟“页面地址/锚链接名”的方式直接跳转到某一个页面中指定的锚链接部分。 2.1.5 链接到电子邮件和网站 超链接地址可以是一个电子邮件地址浏览器会启动邮件程序编辑邮件并将内容发送到该地址。 示例：&lt;a href=&quot;mailto:445304116@qq.com&quot;&gt;发送邮件&lt;/a&gt; 如客户端没安装电子邮件收发程序则无法发送邮件；如有多个电子邮件收发程序，可在浏览器的设置中指定使用。 2.2 图片元素 通过简单的标记就可以在HTML页面中引用图片，制作图文并茂的页面。 图片可以和超链接配合使用。 2.2.1 图片格式 BMP格式： Win系统下的标准位图格式，未压缩，生成图像文件较大。 GIF格式： 可变长压缩的，支持2~256种色彩的图像，并支持背景透明和动画。只支持256种色彩，故不适合保存图片。 JPEG格式： 有损压缩格式，压缩比较高，支持24bit色彩，适合保存照片。 PNG格式： 能投提供长度比GIF格式小30%的无损压缩图片，支持背景透明，支持Alpha通道调整图像的透明度。 2.2.2 基本用法 图片元素：&lt;inmg&gt;，通过src属性指定图片地址就可以将图片显示在页面上。 &lt;img&gt;元素只能引用此图片，未将图片本身的内容复制到HTML文件中。 2.2.3 常用属性 width/height：设置宽度/高度。 只设定一个值，浏览器会根据横纵比自动调整 宽高未设定，则原图显示 支持使用像素或百分比作为单位 border：图片边框的宽度，默认0. alt：当图片无法加载时，用于替换图片内容的文字。 align：图片与文字的的UI器方式、可选值及效果。 top：上对齐 moddle：居中对齐 bottom：下对齐 right：右对齐 left：左对齐 2.2.4 图片与超链接 超链接会自动为图片添加边框，可通过设置border属性去掉边框。 2.2.5 图片热点 单击不同的热点可以跳转到不同的页面，通过这一技术可以让用户只管地进行操作（不过这一块需要在Dreamweaver中操作） 2.3 其他常用元素2.3.1 内嵌元素 &lt;span&gt;元素，常用来修饰行内的文字、图像等内容，不影响元素的显示，需要配合样式表使用。 2.3.2 块级元素 &lt;div&gt;元素，可包含其他元素（如：段落、超链接、图像等），将多个元素组织在一起，通过样式表可以修饰这些元素外观。 2.3.3 上标与下标 &lt;sup&gt;：上标 &lt;sub&gt;：下标 2.3.4 滚动字幕 &lt;marquee&gt;元素，用来滚动显示文字或图片，通过设置属性可以控制滚动方向和速度。 常用属性： width/height：设置字幕的宽度和高度 direction：设置字幕滚动方向（left/right/up/down） scrollamount：设置字幕的滚动速度，值越大滚动越快 bgcolor：设置字幕背景色]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python实例(一)]]></title>
      <url>%2F2017%2F11%2F29%2FPython%2FPython-instance-01%2F</url>
      <content type="text"><![CDATA[1 生成随机数 程序要求：生成200个指定长度的随机数 程序应用：可以随机生成复杂的密码 12345678910111213141516171819202122# coding: utf8# 生成200个指定长度的随机数import randomimport stringdef rand_str(num, len=7): f = open('file.txt', 'w') count = 1 for i in range(num): restr = '' chars = string.ascii_lowercase + string.digits for i in range(len): restr += random.choice(chars) f.write(str(count)+ ' ' + restr +'\n') count += 1 f.close()if __name__ == '__main__': rand_str(200, 20) 2 交集、差集field = [‘6’, ‘11’, ‘12’, ‘100’, ‘101’, ‘102’, ‘103’, ‘104’, ‘105’]range(100,255)求在range(100,255)内，但不在field[:]内 12345678field = ['6', '11', '12', '100', '101', '102', '103', '104', '105']range_list = [ str(value) for value in range(100,255) ]list = [ value for value in range_list[:] if value in field ]print list[:] # range_list 与 field的交集list2 = [ value for value in field2 if value not in field ]print list2[:] # range_list 与 list的差集]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python之禅]]></title>
      <url>%2F2017%2F11%2F29%2FPython%2Fpython-000%2F</url>
      <content type="text"><![CDATA[《Python圣经》在Python解释器里，如果键入import this，会出现Zen of Python！细细的品味，这里浓缩了Python的精华。 原文The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren’t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one– and preferably only one –obvious way to do it.Although that way may not be obvious at first unless you’re Dutch.Now is better than never.Although never is often better than right now.If the implementation is hard to explain, it’s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea – let’s do more of those! 译文Python之禅 by Tim Peters•优美胜于丑陋（Python 以编写优美的代码为目标）•明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）•简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）•复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）•扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）•间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）•可读性很重要（优美的代码是可读的）•即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）•不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）•当存在多种可能，不要尝试去猜测•而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）•虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）•做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）•如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）•命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iTerm2快捷键汇总]]></title>
      <url>%2F2017%2F11%2F29%2FiTerm2-fast%2F</url>
      <content type="text"><![CDATA[1 标签 新建标签：command + t 关闭标签：command + w 切换标签：command + 数字 command + 左右方向键 切换全屏：command + enter 查找：command + f 2 分屏 垂直分屏：command + d 水平分屏：command + shift + d 切换屏幕：command + option + 方向键 command + [ 或 command + ] 查看历史命令：command + ; 查看剪贴板历史：command + shift + h 3 光标 清除当前行：ctrl + u 到行首：ctrl + a 到行尾：ctrl + e 前进后退：ctrl + f/b (相当于左右方向键) 上一条命令：ctrl + p 搜索命令历史：ctrl + r 删除当前光标的字符：ctrl + d 删除光标之前的字符：ctrl + h 删除光标之前的单词：ctrl + w 删除到文本末尾：ctrl + k 交换光标处文本：ctrl + t 清屏1：command + r 清屏2：ctrl + l 4 系统 ⌘ + 数字在各 tab 标签直接来回切换 选择即复制 + 鼠标中键粘贴，这个很实用 ⌘ + f 所查找的内容会被自动复制 ⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏 ⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏 ctrl + u 清空当前行，无论光标在什么位置 输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令 ⌘ + shift + h 会列出剪切板历史 可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过Alfred实现 ⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e ⌥← / ⌥→ 按单词前移/后移，相当与 - C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了 5 linux快捷组合 C+a / C+e 这个几乎在哪都可以使用 C+p / !! 上一条命令 C+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行) C+w A+d 从光标处删至字首/尾 C+h C+d 删掉光标前后的自负 C+y 粘贴至光标后 C+r 搜索命令历史，这个较常用 6 选中即复制 iTerm有2中选中即复制模式。 一种是用鼠标，在iTerm2中，选中某个路径或者某个单词，就自动复制了。 一种是无鼠标模式，command + f,弹出iTerm2的查找模式，输入要查找并复制得内容的前几个字母，确认找到的是自己的内容后，输入tab，查找窗口将自动变化内容，并将其复制。如果输入得失shift + tab，则自动将查找内容的左边选中并复制。自动完成输入打头的几个字母，然后输入command + ;iTerm2将自动列出之前输入国的类似命令。 7 剪切历史 输入command + shift + h,iTerm2将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到次哦按，在Preferences &gt; General &gt; Save copy/paste history to disk中设置。 查看原文]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mail命令]]></title>
      <url>%2F2017%2F03%2F27%2Flinux_command%2Fcm-mail%2F</url>
      <content type="text"><![CDATA[mail命令是命令行的电子邮件发送和接收工具。操作的界面不像elm或pine那么容易使用，但功能非常完整。之前工作中为了简化上传APK再手动发送相关链接给运营，这个步骤。自己写了一些同步的脚本，并将生成url通过mail命令发送邮件到我的工作邮箱。当时对mail命令的理解太浅，后来参考了很多实例，最后是注册了一个新的邮箱，mail作为一个载体工具，通过我的新邮箱向工作邮箱发送生成的url。这样大大简化了我自身的工作量，减少了90%以上的人为操作错误。 1 mail命令安装1.1 mailx安装 安装mailx 1yum install mailx -y 1.2 配置mail.rc12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 配置前；egrep -v &quot;^#|^$&quot; /etc/mail.rc set hold set append set ask set crt set dot set keep set emptybox set indentprefix=&quot;&gt; &quot; set quote set sendcharsets=iso-8859-1,utf-8 set showname set showto set newmail=nopoll set autocollapse ignore received in-reply-to message-id references ignore mime-version content-transfer-encoding fwdretain subject date from to set bsdcompat# 配置后，即原有的配置冻，在文件的末尾添加5个set语句；egrep -v &quot;^#|^$&quot; /etc/mail.rc set hold set append set ask set crt set dot set keep set emptybox set indentprefix=&quot;&gt; &quot; set quote set sendcharsets=iso-8859-1,utf-8 set showname set showto set newmail=nopoll set autocollapse ignore received in-reply-to message-id references ignore mime-version content-transfer-encoding fwdretain subject date from to set bsdcompat set from=&quot;oyktest@163.com&quot; set smtp=smtp.163.com set smtp-auth-user=oyktest@163.com set smtp-auth-password=ke1993 set smtp-auth=login 1.3 mail命令测试12# 配置如果没问题，一般几秒钟内就能收到邮件；echo &quot;ke-center&quot; | mail -s &quot;ke-center test&quot; AllenKe@efun.com 2 mail常用格式2.1 发送格式 管道 1cat /etc/passwd | mail -s &quot;发件人名称 邮件标题&quot; xxx@163.com,xxx@qq.com 重定向输入 1mail -s &quot;发件人名称 邮件标题&quot; xxx@163.com,xxx@qq.com &lt; /etc/passwd 直接编辑 12# 输入完成后回车按Ctrl+D提交发送mail -s &quot;发件人名称 邮件标题&quot; xxx@163.com,xxx@qq.com]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[saltstack基础]]></title>
      <url>%2F2017%2F03%2F27%2Fsaltstack%2F</url>
      <content type="text"><![CDATA[目前公司内的游戏运维工作基本都是使用saltstack。以前在大学没怎么使用过这种批量管理工具（也没有这样的环境和需求），现在只能一点一点的慢慢拾起。目前六龙、青丘狐等，都是通过一台salt-master控制多台salt-minion，但是现在使用到的功能十分有限，需要再深入的学习、实践和理解。 1 saltstack简介1.1 工作模式 master端：统一管理服务器，负责管理所以服务器。 minion端：被管理服务器上，安装minion的agent。 1.2 三种运行模式 local：本地一台机器关机配置自己本机，一般在单一环境自动化安装可以使用。 Master/Minion：通过server/agent的方式进行管理，最常用的使用方法。 Salt SSH：通过SSH方式进行管理（需要使用到ssh-key）。 1.2 三大功能 远程执行：通过master对远程服务器进行执行操作。 配置管理：通过写好的配置状态对服务器进行管理。 云管理：云管理功能支持如阿里云、亚马逊等一系列公有云的管理，当然保证最火的openstack，可以不需要登录相关账号密码，一条命令即可创建云主机。 2 saltstack安装2.1 salt-master安装配置 配置yum源并安装 12345rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpmyum -y install slat-masterchkconfig salt-master on 修改配置文件 123# 使用master/minion模式一般只需要配置该参数# egrep -v &quot;^#|^$&quot; /etc/salt/masterinterface: 172.16.60.227 启动/关闭/重启 12345678#启动：/etc/init.d/salt-master start#关闭：/etc/init.d/salt-master stop#重启：/etc/init.d/salt-master restart 2.2 salt-minion安装配置 配置yum源并安装 12345rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpmyum -y install salt-minionchkconfig salt-minion on 修改配置文件 1234#指定master的地址，本机的名称即可# egrep -v &quot;^#|^$&quot; /etc/salt/minionmaster: 172.16.60.227id: ke-test-01 启动/关闭/重启 12345678#启动：/etc/init.d/salt-minion start#关闭：/etc/init.d/salt-minion stop#重启：/etc/init.d/salt-minion restart]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS下的python更新]]></title>
      <url>%2F2017%2F03%2F27%2Fpython-update%2F</url>
      <content type="text"><![CDATA[最近准备学习Python，直接拿CentOS系统安装2.7版本的。本身系统上自带的是Python2.6.6，需要将其替换。之前踩了次坑，安装了Python更高级的版本后，yum命令无法正常使用，那一次还是在共用的测试机上弄的。害得我那一群同事找问题找了半天……哈哈哈！！！不过现在好多了，踩了几次坑也有了自己的一套安装、更新的方法。同时，也搭建了一套属于自己的开发环境。通过PyCharm连接到了开发环境上，也减少了本身MacBook（后悔没买pro了）的资源占用。 1 源码安装&emsp;&emsp;由于CentOS默认安装了python2.6.6，但并不适合我们的使用要求，只能下载源码包进行手动更新。12345678910# 到python的官网能下载到相关的源码包wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz -P /usr/local/src/tar zxvf /usr/local/src/Python-2.7.13.tgz -C /usr/local/src/cd Python-2.7.13./configure --prefix=/usr/local/python/make &amp;&amp; make install 2 配置python 备份python2.6.6 123456789101112python -V python2.2.6which python /usr/bin/pythonmv /usr/bin/python /usr/bin/python2.6.6ln -s /usr/local/python/bin/python2.7 /usr/bin/pythonpython -V python2.7.11 3 修改yum12345678which yum /usr/bin/yum# 将第一行的“python”改为“python2.6.6”vim /usr/bin/yum #!/usr/bin/python2.6.6# 如果没有修改，yum命令在运行中可能出错，还是保证使用原来的python2.6.6]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[find命令]]></title>
      <url>%2F2017%2F03%2F22%2Flinux_command%2Fcm-find%2F</url>
      <content type="text"><![CDATA[学习和工作中，遇见比较多需要使用find命令查找文件，最初的时候也只是用来查找文件，但是没有深入的学习和了解。到后面开始接触自主运维的游戏时，每天会生成很多备份的数据库文件。为了对相关的日志进行定期清理，需要使用到find命令和ctime选项对备份目录内的文件进行筛选和过滤，保留7天的游戏数据库数据。再后来慢慢的需求多了，也学会了使用-type选项，通过文件类型来查询文件。目前来说find的使用还是比较浅显，还需要多看看他人的实例。 1 find基础1.1 命令格式1234567891011121314find path -option [ -print ] [ -exec -ok command ] &#123;&#125; \; #pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。 #-print： find命令将匹配的文件输出到标准输出。 #-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&apos;command&apos; &#123; &#125; \;，注意&#123; &#125;和\；之间的空格。 #-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。 #-print 将查找到的文件输出到标准输出 #-exec command &#123;&#125; \;—–将查到的文件执行command操作,&#123;&#125; 和 \;之间有空格 #-ok 和-exec相同，只不过在操作前要询用户 1.2 选项参数12345678910111213141516171819202122232425262728293031-name filename #查找名为filename的文件-perm #按执行权限来查找-user username #按文件属主来查找-group groupname #按组来查找-mtime -n +n #按文件更改时间来查找文件，-n指n天以内，+n指n天以前-atime -n +n #按文件访问时间来查GIN: 0px&quot;&gt;-ctime -n +n #按文件创建时间来查找文件，-n指n天以内，+n指n天以前-nogroup #查无有效属组的文件，即文件的属组在/etc/groups中不存在-nouser #查无有效属主的文件，即文件的属主在/etc/passwd中不存-newer f1 !f2 #找文件，-n指n天以内，+n指n天以前-ctime -n +n #按文件创建时间来查找文件，-n指n天以内，+n指n天以前-nogroup #查无有效属组的文件，即文件的属组在/etc/groups中不存在-nouser #查无有效属主的文件，即文件的属主在/etc/passwd中不存-newer f1 !f2 #查更改时间比f1新但比f2旧的文件-type b/d/c/p/l/f #查是块设备、目录、字符设备、管道、符号链接、普通文件-size n[c] #查长度为n块[或n字节]的文件-depth #使查找在进入子目录前先行查找完本目录-fstype #查更改时间比f1新但比f2旧的文件-type b/d/c/p/l/f #查是块设备、目录、字符设备、管道、符号链接、普通文件-size n[c] #查长度为n块[或n字节]的文件-depth #使查找在进入子目录前先行查找完本目录-fstype #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到-mount #查文件时不跨越文件系统mount点-follow #如果遇到符号链接文件，就跟踪链接所指的文件-cpio %; #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到-mount #查文件时不跨越文件系统mount点-follow #如果遇到符号链接文件，就跟踪链接所指的文件-cpio #对匹配的文件使用cpio命令，将他们备份到磁带设备中-prune #忽略某个目录 2 查找条件2.1 根据名称查找2.2 根据文件从属关系2.3 根据文件的类型1-type option : 根据不同的文件类型筛选 选项 含义 f 普通文件 d 目录文件 l 符号链接文件 b 块设备文件 c 字符设备文件 p 管道文件 s 套接字文件 2.4 根据文件的大小123456-size [+|-] #UNIT#常用单位 ： k,M,G #UNIT：(#-1, #] -#UNIT：[0,#-1] +#UNIT：(#, oo) 2.5 根据时间戳123atime : #文件最后访问时间；mtime : #文件的最后修改时间；ctime : #文件最后改变的时间； 2.5.1 以天为单位 -atime [+|-]# 12345678# : [#, #-1) 最后访问时间在#天前（大于等于#天，小于#-1天前）；等价于最后访问时间与当前的时间差大于（#-1）*24小时，小于等于#*24小时。-# : (#, 0] 最后访问时间在#天以内，不包括24小时前的那一刻；等价于最后访问时间与当前的时间差小于#*24小时。+# : (oo, #-1) 最后访问时间在#-1天以前，包括#-1天前；等价于最后访问时间与当前的时间差大于等于#*24小时。 -mtime -ctime 2.5.2 以小时为单位 2.5.3 以分钟为单位1-daystart : 时间条件的开始先决条件。如果没有的时候，比较的开始时间为当前时间。如果有此参数，则比较的开始时间为当天的23:59:59。 2.6 根据权限查找12345-perm [/|-]mode mode : 精确权限匹配； /mode : 任何一类用户（u，g，o）的权限中的任何一位（r，w，x）符合条件即满足；9位权限之间存在“或”关系； -mode : 每一类用户（u，g，o）的权限中的每一位（r，w，x）同时符合条件即满足；9位权限之间存在“与”关系； 2.6.1 精确查找&emsp;&emsp;就是匹配权限值完全相等。 2.6.2 /model&emsp;&emsp;只要有一组用户匹配到一个权限即可。&emsp;&emsp;通俗说：就是属主拥有给定属主权限的某一个，或者数组拥有给定权限的某一个，或者其他用户拥有给定权限的某一个即可。 2.6.3 -mode&emsp;&emsp;存在并且的关系。&emsp;&emsp;通俗说：就是给定的属主权限必须拥有。并且给定的数组权限必须拥有。并且给定的其他用户权限必须拥有。 2.6.4 处理动作 参数 操作内容 -print 输出至标准输出；默认的动作； -ls 类似与对查找到的文件执行“ls -l”命令，输出文件的详细信息； -delete 删除查找到的文件； -fls /PATH/TO/SOMEFILE 把查找到的所有文件的长格式信息保存到指定文件中； -ok COMMAND {} \ 对查找到的每个文件执行由COMMAND表示的命令；每次操作都由用户进行确认； -exec COMMAND {} \ 对查找到的每个文件执行由COMMAND表示的命令； 注意&emsp;&emsp;find传递查找到的文件路径至后面的命令时，是先查找出所有符合条件的文件路径，并一次性传递给后面的命令；有些命令不能接受过长的参数，此时命令执行会失败。 &emsp;&emsp;处理办法1find | xargs COMMAND 3 常用实例 空目录/空文件 1find /dir -depth -type d/f -empty 根据名字查找 1find /dir -name file_name 根据扩展名查找 1find /dir -name &quot;*.txt&quot; 具有特殊权限且特定扩展名的文件 1find /dir -name &quot;.txt&quot; -perm 644 根据文件具有的权限属性查找 1find /dir -perm -permision_bits 未知拓展名，使用文件名查找 1find /dir -name &quot;test.*&quot; 在24小时内修改过的文件 123456find /dir -mtime n# n的值：# 0表示24小时# 1表示48小时# 2表示72小时 最近24小时内存取过的文件 1find /dir -atime n 根据所有者查找文件 1find /dir -user root 查重并删除文件 1find /dir -name my_test_file | xargs rm 查找2017-03-03到2017-03-28之间的文件 1find /dir -name test_file -newermt &apos;2017-03-03&apos; ! -newermt &apos;2013-03-28&apos; 3天”以前”被改动过的文件 (前第三天以前 → 2011/09/05 12:00 以前的文件) (&gt; 72 小时) 1find /var/log/ -mtime +3 -type f -print 3天內被改动过的文件 (2011/09/05 12:00 ~ 2011/09/08 12:00 內的文件) (0 ~ 72 小时內) 1find /var/log/ -mtime -3 -type f -print 前第 3 天被改动过的文件 (2011/09/04 12:00 ~ 2011/09/05 12:00 內的文件) (72 ~ 96 小时) 123find /var/log/ -mtime 3 -type f -printfind /var/log/ -mtime +2 -mtime -4 -type f -print]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[easy_install命令]]></title>
      <url>%2F2017%2F03%2F03%2FPython%2Feasy-install%2F</url>
      <content type="text"><![CDATA[easy_install命令主要用于安装python的扩展库；其他的功能暂时没有去详细了解过。 1 下载安装esay_install Python 1234wget -q http://peak.telecommunity.com/dist/ez_setup.py #安装python ez_setup.py Ubuntu 1sudo apt-get install python-setuptools CentOS 1sudo yum install python-setuptools 2 esay_install安装pip pip是一个可以替代 easy_install 的安装和管理 python 软件包的工具,提供更好的提示信息，可以删除包。linux自带的python版本比较低，软件源里没有python-pip包，不过我们可以先按照上面安装easy-install，在用easy_install安装pip 1sudo easy_install pip 3 用法 安装 12easy_install &lt;package_name&gt; easy_install &quot;&lt;package_name&gt;==&lt;version&gt;&quot; 升级 1easy_install -U &quot;&lt;package_name&gt;&gt;=&lt;version&gt;&quot;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[pip命令]]></title>
      <url>%2F2017%2F03%2F03%2FPython%2Fpip%2F</url>
      <content type="text"><![CDATA[pip命令目前我也是使用得最多的，我的大部分Python拓展库都是使用pip安装来的。 1 下载1wget &quot;https://pypi.python.org/packages/source/p/pip/pip-1.5.4.tar.gz#md5=834b2904f92d46aaa333267fb1c922bb&quot; --no-check-certificate 2 安装1234567#解压tar -xzvf pip-1.5.4.tar.gzcd pip-1.5.4#安装python setup.py install 3 使用 安装一个包 12pip install &lt;package_name&gt;pip install &lt;package_name&gt;==&lt;version&gt; 升级一个包 1pip install --upgrade &lt;package_name&gt;&gt;=&lt;version&gt; 卸载一个包 1pip uninstall &lt;package_name&gt; 1234567891011121314151617181920212223242526272829# pip --help Usage: pip &lt;command&gt; [options] Commands: install 安装包. uninstall 卸载包. freeze 按着一定格式输出已安装包列表 list 列出已安装包. show 显示包详细信息. search 搜索包，类似yum里的search. wheel Build wheels from your requirements. zip 不推荐. Zip individual packages. unzip 不推荐. Unzip individual packages. bundle 不推荐. Create pybundles. help 当前帮助. General Options: -h, --help 显示帮助. -v, --verbose 更多的输出，最多可以使用3次 -V, --version 现实版本信息然后退出. -q, --quiet 最少的输出. --log-file &lt;path&gt; 覆盖的方式记录verbose错误日志，默认文件：/root/.pip/pip.log --log &lt;path&gt; 不覆盖记录verbose输出的日志. --proxy &lt;proxy&gt; Specify a proxy in the form [user:passwd@]proxy.server:port. --timeout &lt;sec&gt; 连接超时时间 (默认15秒). --exists-action &lt;action&gt; Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup. --cert &lt;path&gt; 证书.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[常用英语词语]]></title>
      <url>%2F2017%2F02%2F24%2Fenglish-works%2F</url>
      <content type="text"><![CDATA[英语比较差，有时间还是多学学这些日常的英语单词。小时候感觉学计算机就不用学英语了，但理想往往与现实相反。工作了快两年，我倒是发现英语的学习原来越重要，生成成为了工作中必不可少和提升效率的一环。 月份 全称 简称 中文 January Jan 一月 February Feb 二月 March Mar 三月 April Apr 四月 May May 五月 June Jun 六月 July Jul 七月 August Aug 八月 September Sep or Sept 九月 October Oct 十月 November Nov 十一月 December Dec 十二月 星期 全称 简称 中文 Monday Mon 星期一 Tuesday Tues 星期二 Wednesday Wed 星期三 Thursday Thur 星期四 Friday Fri 星期五 Saturday Sat 星期六 Sunday Sun 星期天 时间 全称 简称 中文 minute 分钟 hour 小时 day 天 week 星期 month 月 year 年 tomorrow 明天]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Shell中的特殊变量]]></title>
      <url>%2F2017%2F02%2F24%2Fpath-count%2F</url>
      <content type="text"><![CDATA[Linux下常用的一些环境变量总结，方便以后的操作和shell编程。 $$Shell本身的PID（ProcessID） $!Shell最后运行的后台Process的PID $?最后运行的命令的结束代码（返回值） $-使用Set命令设定的Flag一览 $*所有参数列表。如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。 $@所有参数列表。如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。 $#添加到Shell的参数个数 $0Shell本身的文件名 \$1～$n添加到Shell的各参数值。$1是第1参数、$2是第2参数…。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Top]]></title>
      <url>%2F2017%2F02%2F24%2Flinux_command%2Ftop-command%2F</url>
      <content type="text"><![CDATA[Top命令其实十分的强大，可惜还没熟悉的使用上。 q：退出top h：显示帮助文档，也就是哪些按键可以使用。按下任意键返回。 B：大写的B，加粗某些信息。 f：在进程列表中添加或删除某些列。 F：改变进程列表排序所参照的列。默认情况下，是按照%CPU那一列来排序。 u：依照用户来过滤显示。可以输入用户名，按回车。 k：结束某个进程。会让你输入要结束的进程的PID。 s：改变刷新页面的时间。默认地，页面每隔3秒刷新一次。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[less命令]]></title>
      <url>%2F2017%2F02%2F24%2Flinux_command%2Fless-command%2F</url>
      <content type="text"><![CDATA[平时查看文档太少使用less和more，现在要开始慢慢习惯使用这些命令工具。以前可以直接使用cat或者vi直接查看文件，但是后面查看一些大的日志文件，不选择合适的工具估计会把自己折腾死。 空格键：文件内容读取下一个终端屏幕的行数，相当于前进一个屏幕（页）。很常用的快捷键。与键盘上的PageDown（下一页）效果一样。 回车键：文件内容读取下一行，也就是前进一行。与键盘上的向下键效果是一样的。 d键：前进半页（半个屏幕）。 b键：后退一页。与键盘上的PageUp（上一页）效果一样。 y键：后退一行。与键盘上的向上键效果是一样的。 u键：后退半页（半个屏幕）。 q键：停止读取文件，中止less命令。 =号：显示你在文件中的什么位置（会显示当前页面的内容是文件中第几行到第几行，整个文件所含行数，所含字符数，整个文件所含字符）。 h键：显示帮助文档。按q键退出帮助文档。 /（斜杠）：进入搜索模式，只要在斜杠后面输入你要搜索的文字，按下回车键，就会把所有符合的结果都标识出来。要在搜索所得结果中跳转，可以按n键（跳到下一个符合项目），N键（shift键+n。跳到上一个符合项目）。当然了，正则表达式（Regular Expression）也是可以用在搜索内容中的。这里我们就不细说什么是正则表达式了，有兴趣可以百度看看。 n键：跳到下一个符合的搜索结果。 N键：跳到上一个符合的搜索结果]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[常用的终端快捷键一]]></title>
      <url>%2F2017%2F02%2F24%2Fscreen-command%2F</url>
      <content type="text"><![CDATA[熟悉使用这些终端的快捷键，可以大大提高使用linux的系统的效率，起码不会让你使用的时候那么的难受，虽然我自己没啥感觉！ Ctrl + a，松开，再按c：创建一个新的虚拟终端。 Ctrl + a，松开，再按w：显示当前虚拟终端的列表。 此处的 0$ bash 1-$ bash 2*$ bash 表示此时打开了3个虚拟终端，都叫作bash，编号是0，1，2。 有*（星号）的那个虚拟终端就是我们目前所在的虚拟终端，也就是第3个，编号是2。 Ctrl + a，松开，再按A：重命名当前虚拟终端。修改后的名字，你之后再用Ctrl + a，松开，再按w时就会看trl + a，松开，再按n：跳转到下一个虚拟终端。 Ctrl + a，松开，再按p：跳转到上一个虚拟终端。 Ctrl + a，松开，再按Ctrl + a：跳转到最近刚使用的那个虚拟终端。 Ctrl + a，松开，再按0~9数字键：跳转到第0~9号虚拟终端。 Ctrl + a，松开，再按 “（双引号）：会让你选择跳转到哪个虚拟终端。 Ctrl + a，松开，再按k：关闭当前终端。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Mac下Python模版安装]]></title>
      <url>%2F2017%2F01%2F04%2FPython%2FPython-easygui%2F</url>
      <content type="text"><![CDATA[根据我的学习需求在自己的macbook上安装各种python的模版进行学习、开发，后续会不断进行更新……目前安装了Python2.7.10和Python3.2两个版本，但后面觉得本身基础知识不扎实，还是在远端的虚拟主机上摸索部署，目前通过PyCharm连接到远端的开发环境上进行相关开发操作，也方便了项目的同步。 1 使用easy_install在线安装&emsp;&emsp;mac下默认的python环境集成了这个工具可以非常方便的安装各种python包。&emsp;&emsp;easy_install是由PEAK(Python Enterprise Application Kit)开发的setuptools包里带的一个命令，所以使用easy_install实际上是在调用setuptools来完成安装模块的工作。通过模块名称来安装。setuptools会自动搜索PyPI 以查找最新版本的模块。12#格式easy_install parameter 2 安装Python-easygui12345678#在线下载easygui，并会自动解压sudo easy_install easygui#下载好后进入到解压的目录python setup.pyinstalleasy_install]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[tomcat多实例安装和配置]]></title>
      <url>%2F2016%2F12%2F29%2FWeb%2Fapache-tomcat%2F</url>
      <content type="text"><![CDATA[tomcat实习入职的时候搭建过，当时一窍不通，只能照着部署文档的内容进行部署；后来业务又需求了，再重新回来看，发现很多东西就明了。这里主要记录java的的基础的安装，没有用源码，直接yum安装就好；另外，apache-tomcat直接从网上下载后就能使用了，只是多个tomcat需要修改下相关的端口，没有想象中的那么难；另外优化部分需要在后面自己再慢慢琢磨下。 1 安装jdk/java 查看是否已安装jdk/java 123456yum list installed | grep javarpm -aq | grep java#查看yum库中的安装包yum -y list java* 卸载已经安装的jdk/java 12#根据实际情况进行卸载yum remove -y java* 安装jdk/java 1234yum -y install java-1.7.0-openjdk*#查看安装的jdk/java版本java -version 2 安装apache-tomcat 下载安装包apache-tomcat下载 安装apache-tomcat 12345678910111213#上传安装包cd /usr/local/src/rz#解压tar -zxvf apache-tomcat-7.0.67.tar.gz -C /usr/local/cd /usr/local/cp -r apache-tomcat-7.0.67 tomcat_01#tomcat_02为下一步开多个tomcat实例做准备cp -r apache-tomcat-7.0.67 tomcat_02 启动tomcat_01 123cd /usr/local/tomcat_01/bin/./startup.sh 测试验证 3 配置多个tomcat 修改tomcat_02配置文件配置文件位置：/usr/local/tomcat_02/conf/server.xml 123456789101112131415161718192021222324252627282930313233343536&lt;!--tomcat_02配置文件--&gt;&lt;!--用于停止tomcat的端口，默认8005--&gt;&lt;Server port="8005" shutdown="SHUTDOWN"&gt; &lt;Listener className="org.apache.catalina.startup.VersionLoggerListener" /&gt;&lt;!--修改为9005--&gt;&lt;Server port="9005" shutdown="SHUTDOWN"&gt; &lt;Listener className="org.apache.catalina.startup.VersionLoggerListener" /&gt;&lt;!--tomcat监听端口和返回值的端口，默认8080--&gt;&lt;Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt;&lt;Connector executor="tomcatThreadPool" port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt;&lt;!--修改为9080--&gt;&lt;Connector port="9080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt;&lt;Connector executor="tomcatThreadPool" port="9080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt;&lt;!--apache监听端口，默认8009--&gt; &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt;&lt;!--修改为9009--&gt; &lt;Connector port="9009" protocol="AJP/1.3" redirectPort="9443" /&gt; &lt;!--SSl连接端口，默认8443--&gt; &lt;!--如果没启动https可以忽略，个人修改为9443--&gt; 启动tomcat_02 123cd /usr/local/tomcat_02/bin/./startup.sh 测试验证]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[常用的终端快捷键二]]></title>
      <url>%2F2016%2F12%2F26%2Fterminal-control%2F</url>
      <content type="text"><![CDATA[这是文档一的延伸，可能有些地方重复了，但也无伤大雅！ 1 常用操作 Ctrl + L用于清理终端的内容，就是清屏的作用。其实clear命令也有同样效果，但是你不觉得Ctrl + L 的按键是比输入clear这五个字母更快速吗？ Ctrl + D给终端传递EOF （End Of File，文件结束符），在运行程序时很有用，有些程序我们需要在接收到EOF输入时结束，那么这个快捷键就可以派上用场了。如果你在命令行提示符后什么也不输入的情况下直接按下这组快捷键，那么就会关闭当前的终端。 Shift + PgUp用于向上滚屏，与鼠标的滚轮向上滚屏是一个效果，但岂不是很方便吗？ Shift + PgDn用于向下滚屏，与鼠标的滚轮向下滚屏是一个效果。 2 长命令操作 Ctrl + A光标跳到一行命令的开头。一般来说，Home键有相同的效果。 Ctrl + E光标跳到一行命令的结尾。一般来说，End键有相同的效果。 Ctrl + U删除所有在光标左侧的命令字符。 Ctrl + K删除所有在光标右侧的命令字符。 Ctrl + W删除光标左侧的一个“单词”，这里的“单词”指的是用空格隔开的一个字符串。例如 -a 就是一个“单词”。 Ctrl + Y粘贴用Ctrl + U， Ctrl + K或Ctrl + W“删除”的字符串，有点像“剪切-粘贴”。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vsftpd本地用户登录]]></title>
      <url>%2F2016%2F12%2F23%2Fvsftpd-reallogin%2F</url>
      <content type="text"><![CDATA[vsftp的三种访问方式：匿名、本地用户和虚拟目录。感觉比较难去配置、理解，将常用的一些配置和操作记录下来，方便自己以后进行搭建和调优等。主要文件： 主配置文件/etc/vsftpd/vsftpd.conf 下载/上传日志文件/var/log/xferlog chroot禁用列表/etc/vsftpd/chroot_list 用户限制文件/etc/vsftpd/user_list 验证文件/etc/pam.d/vsftpd 用户配置目录/etc/vsftpd/vsftpd_user_conf 主配置文件——vsftpd.conf1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#如果为NO一般就是选择用xinet启动ftp服务listen=YES#禁止匿名登录anonymous_enable=NO#启动本地用户登录local_enable=YESwrite_enable=YESlocal_umask=022#欢迎信息ftpd_banner=Welcome to this FTP server!#下载／上传信息配置xferlog_enable=YESxferlog_file=/var/log/xferlogxferlog_std_format=YES#启用默认端口connect_from_port_20=YES#最大连接的客户端数量max_clients=10#是否隐藏文件的所有者和组信息,YES:当用户使用&quot;ls -al&quot;之类的指令时,#在目录列表中所有文件的拥有者和组信息都显示为ftp.默认为NOhide_ids=YES#限制用户在自己家之内chroot_local_user=YES#启用不被chroot的使用者账号chroot_list_enable=YES#不被chroot的使用者账号的列表文件chroot_list_file=/etc/vsftpd/chroot_list#针对不同的用户做不同的配置，该目录下都是以用户名作为文件名user_config_dir=/etc/vsftpd/vsftpd_user_conf#限制某些用户的访问userlist_enable=YESuserlist_deny=YESuserlist_file=/etc/vsftpd/user_list#用户验证配置pam_service_name=vsftpdpam_service_name=/etc/pam.d/vsftpd 上传/下载日志——xferlog 概括：该日志记录记录FTP的上传/下载的记录。 日志格式12345678910111213141516Mon Dec 26 15:59:35 2016 1 172.16.60.100 736 /index.php b _ i r apple ftp 0 * c#a.日期和时间 #b.下载文件所花费的秒数 #c.远程系统 #d.名称 #e.文件大小 #f.本地路径名 #g.传输类型（a：ASCII，b：二进制） #h.与压缩相关的标志或tar，或&quot;_&quot;（如果没有压缩的话） #i.传输方向（相对于服务 器而言：i代表进，o代表出） #j.访问模式（a：匿名，g：输入口令，r：真实用户） #k.用户名 #l.服务名（通常是ftp） #m.认证方法（l：RFC931，或 0） #n.认证用户的ID或&quot;*&quot;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vim快捷键图]]></title>
      <url>%2F2016%2F12%2F17%2Flinux_command%2Fvim%2F</url>
      <content type="text"><![CDATA[VIM的快捷操作，学会使用真的挺NB的。 1 基础部分 2 拓展部分]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Apache配置ssl证书实现https访问]]></title>
      <url>%2F2016%2F12%2F16%2FWeb%2Fapache-https%2F</url>
      <content type="text"><![CDATA[1 Apache的ssl证书 Apche的ssl证书一共有三个1_root_bundle.crt2domainname.com.crt3 domainname.com.key注：domainname.com是您的域名；2 domainname.com.crt为公钥；3 domainname.com.key为私钥。(文件后缀名crt和cer的性质是一样的) 2 安装ssl证书 安装openssl和apache的ssl模块 1yum install openssl mod_ssl -y 修改apache下的httpd.conf配置文件 1234567#默认配置路径vi /etc/httpd/conf/httpd.conf#在配置文件中找到一下行，并去掉注释#如果没有则自行添加到配置文件中LoadModule ssl_module modules/mod_ssl.soInclude conf/extra/httpd-ssl.conf 修改apache 12345678910111213141516171819202122#默认配置文件路径vi /etc/httpd/conf.d/ssl.conf#找到以下行，并去掉注释#如没有请自行添加SSLProtocol all -SSLv2 -SSLv3SSLCipherSuite AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL#添加证书的路径#注：不管是添加还是修改都需要先做备份#将服务器证书公钥(2_domainname.com.crt)配置到该路径下，同时替换localhost.crtSSLCertificateFile /etc/pki/tls/certs/localhost.crt#将服务器证书私钥(3_domainname.com.key)配置到该路径下，同时替换localhost.keySSLCertificateKeyFile /etc/pki/tls/private/localhost.key#删除行首的“#”号注释符，并将中级CA证书(1_root_bundle.crt)配置到该路径下，同时替换成server-chain.crtSSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt#保存退出#重启apacheservice httpd restart 3 验证测试 绑定hosts 12345#Linux&amp;Mac:/etc/hosts#Windows:C:\Windows\System32\drivers\etc58.229.*.* test.example.com 访问成功视例]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[tomcat配置ssl证书实现https访问]]></title>
      <url>%2F2016%2F12%2F09%2FWeb%2Ftomcat-https%2F</url>
      <content type="text"><![CDATA[由于工作需要，需要在某语音服务器上配置ssl证书。该服务器上使用的是tomcat运行着语音服的程序，由于自己也不怎么熟悉，刚开始在测试环境中进行了测试，琢磨了一个上午，查了一些资料，总结起来就是将申请下来的证书和密钥添加到配置文件。 遇上的问题：1.配置https后，域名能访问8443端口，但是ip访问不了8080端口；2.对于tomcat的ssl证书的理解不深入，导致配置中一直出现问题； 1 配置tomcat的ssl证书 tomcat安装路径及目录结构 配置文件路径 1vim /usr/local/tomcat/conf/server.xml 配置文件路径 1234567891011&lt;!--在tomcat配置文件中找到&lt;Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol" SSLEnabled="true" maxThreads="150" scheme="https" secure="true" clientAuth="false" sslProtocol="TLS" /&gt;--&gt;#将注释去掉，添加tomcat的相关域名证书和密码，添加后设置如下&lt;Connector port="443" protocol="org.apache.coyote.http11.Http11Protocol" SSLEnabled="true" maxThreads="150" scheme="https" secure="true" clientAuth="false" keystoreFile="/usr/local/tomcat/conf/example.com.jks" keystorePass="example_passwd" sslProtocol="TLS" /&gt; 证书存放路径可以自定义，在配置keystoreFile时一定需要使用绝对路径，可以减少很多不必要的错误。 2 验证配置 对tomcat进行重启 1234567#转到../tomcat/bin/下#关闭./shutdown.sh#开启./startup.#!/bin/sh 绑定hosts 12345#Linux&amp;Mac:/etc/hosts#Windows:C:\Windows\System32\drivers\etc58.229.*.* test.example.com 访问链接验证注：因为证书是针对域名的，所以一般访问域名才会生效 1https://test.example.com:8443/ 访问成功示例]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Next主题配置文件详解]]></title>
      <url>%2F2016%2F12%2F01%2Fnext-config%2F</url>
      <content type="text"><![CDATA[对Next主题文件学习的一些标注；备注一部分常用的优化配置项。前端的知识学习得太少，对很多操作比较无可奈何，暂时只能做一些简单的修改。后面需要好好研究下官网的文档，并结合论坛和博客的文章，完善好自己的博客。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485# ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# Put your favicon.ico into `hexo-site/source/` directory.# 站标favicon: /favicon.ico# Set default keywords (Use a comma to separate)# 网站关键字keywords: "Hexo, NexT"# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.#rss:# Specify the date when the site was setup# 站点建立时间since: 2016-11-25# Footer `powered-by` and `theme-info` copyrightcopyright: true# Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.# See: https://support.google.com/webmasters/answer/139066# Tips: Before you open this tag, remeber set up your URL in hexo \_config.yml ( ex. url: http://yourdomain.com )canonical: true# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)# 菜单路径设置；若hexo在二级目录放置要去掉／# 这里的顺序会影响页面上的排版menu: # 首页／主页 home: / # 归档／分类 categories: /categories # 归档 archives: /archives # 关于 about: /about # 标签 #tags: /tags # 网站地图 #sitemap: /sitemap.xml # 公益404页面 #commonweal: /404.html# Enable/Disable menu icons.# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of menu item and value is the name of FontAwsome icon. Key is case-senstive.# When an question mask icon presenting up means that the item has no mapping icon.# icon图标menu_icons: enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: user categories: th schedule: calendar #tags: tags archives: archive sitemap: sitemap commonweal: heartbeat# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes# next三个排版模式#scheme: Muse#scheme: Mistscheme: Pisces# ---------------------------------------------------------------# Font Settings# - Find fonts on Google Fonts (https://www.google.com/fonts)# - All fonts set here will have the following styles:# light, light italic, normal, normal intalic, bold, bold italic# - Be aware that setting too much fonts will cause site running slowly# - Introduce in 5.0.1# ---------------------------------------------------------------font: enable: true # Uri of fonts host. E.g. //fonts.googleapis.com (Default) host: # Global font settings used on &lt;body&gt; element. global: # external: true will load this font family from host. external: true family: Lato # Font settings for Headlines (h1, h2, h3, h4, h5, h6) # Fallback to `global` font settings. headings: external: true family: # Font settings for posts # Fallback to `global` font settings. posts: external: true family: # Font settings for Logo # Fallback to `global` font settings. # The `size` option use `px` as unit logo: external: true family: size: # Font settings for &lt;code&gt; and code blocks. codes: external: true family: size:# ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------# Social Links# 设置社交链接# Key is the link label showing to end users.# Value is the target link (E.g. GitHub: https://github.com/iissnan)social:#LinkLabel: Link GitHub: https://github.com/allenouyangke/# Social Links Icons# 设置社交链接的图标# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of the item and value is the name of FontAwsome icon. Key is case-senstive.# When an globe mask icon presenting up means that the item has no mapping icon.social_icons: enable: true # Icon Mappings. # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome GitHub: github Twitter: twitter Weibo: weibo# Sidebar Avatar# in theme directory(source/images): /images/avatar.jpg# in site directory(source/uploads): /uploads/avatar.jpg#avatar:# Table Of Contents in the Sidebartoc: enable: true # Automatically add list number to toc. number: true# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero#creative_commons: by-nc-sa#creative_commons:# 侧边栏显示位置sidebar: # Sidebar Position, available value: left | right position: left #position: right # Sidebar Display, available value: # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggler. display: post #display: always #display: hide #display: remove# Blogrolls# 友情链接#links_title: Links#links_layout: block#links_layout: inline#links: #Title: http://example.com/# ---------------------------------------------------------------# Post Settings# ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: true# Automatically excerpt description in homepage as preamble text.excerpt_description: true# Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true length: 150# Post meta display settingspost_meta: created_at: true updated_at: false categories: true# Wechat Subscriber# 订阅微信公众号#wechat_subscriber: #enabled: true #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg #description: ex. subscribe to my blog by scanning my public wechat account# ---------------------------------------------------------------# Misc Theme Settings# ---------------------------------------------------------------# Custom Logo.# !!Only available for Default Scheme currently.# Options:# enabled: [true/false] - Replace with specific image# image: url-of-image - Images's urlcustom_logo: enabled: false image:# Code Highlight theme#设置文章中代码高亮主题# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night bright# ---------------------------------------------------------------# Third Party Services Settings# ---------------------------------------------------------------# MathJax Supportmathjax: enable: false per_page: false cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML# Swiftype Search API Key#swiftype_key:# Baidu Analytics ID#baidu_analytics:# Duoshuo ShortName#duoshuo_shortname:# Disqus#disqus_shortname:# Hypercomments#hypercomments_id:# Baidu Share# Available value:# button | slide# Warning: Baidu Share does not support https.#baidushare:## type: button# Share#jiathis:# Warning: JiaThis does not support https.#add_this_id:# Share#duoshuo_share: true# Google Webmaster tools verification setting# See: https://www.google.com/webmasters/#google_site_verification:# Google Analytics#google_analytics:# CNZZ count#cnzz_siteid:# Application Insights# See https://azure.microsoft.com/en-us/services/application-insights/# application_insights:# Make duoshuo show UA# user_id must NOT be null when admin_enable is true!# you can visit http://dev.duoshuo.com get duoshuo user id.duoshuo_info: ua_enable: true admin_enable: false user_id: 0 #admin_nickname: Author# Facebook SDK Support.# https://github.com/iissnan/hexo-theme-next/pull/410facebook_sdk: enable: false app_id: #&lt;app_id&gt; fb_admin: #&lt;user_id&gt; like_button: #true webmaster: #true# Facebook comments plugin# This plugin depends on Facebook SDK.# If facebook_sdk.enable is false, Facebook comments plugin is unavailable.facebook_comments_plugin: enable: false num_of_posts: 10 # min posts num is 1 width: 100% # default width is 550px scheme: light # default scheme is light (light or dark)# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: false app_id: #&lt;app_id&gt; app_key: #&lt;app_key&gt;# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: 本站访客数 #site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; site: 人次 #site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: 本站总访问量 #site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; site_pv_footer: 次 #site_pv_footer: # custom pv span for one page only page_pv: true page_pv_header: 本文总阅读量 #page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt; page_pv_footer: 次 #page_pv_footer:# Tencent analytics ID# tencent_analytics:# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: false# Google Calendar# Share your recent schedule to others via calendar page## API Documentation:# https://developers.google.com/google-apps/calendar/v3/reference/events/listcalendar: enable: false calendar_id: &lt;required&gt; api_key: &lt;required&gt; orderBy: startTime offsetMax: 24 offsetMin: 4 timeZone: showDeleted: false singleEvents: true maxResults: 250# Algolia Searchalgolia_search: enable: false hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: "We didn't find any results for the search: $&#123;query&#125;" hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms"#! ---------------------------------------------------------------#! DO NOT EDIT THE FOLLOWING SETTINGS#! UNLESS YOU KNOW WHAT YOU ARE DOING#! ---------------------------------------------------------------# Motionuse_motion: true# Fancyboxfancybox: true# Script Vendors.# Set a CDN address for the vendor you want to customize.# For example# jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js# Be aware that you should use the same version as internal ones to avoid potential problems.# Please use the https protocol of CDN files when you enable https on your site.vendors: # Internal path prefix. Please do not edit it. _internal: lib # Internal version: 2.1.3 jquery: # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox/ fancybox: fancybox_css: # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick fastclick: # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload lazyload: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity_ui: # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js/ ua_parser: # Internal version: 4.6.2 # See: http://fontawesome.io/ fontawesome: # Internal version: 1 # https://www.algolia.com algolia_instant_js: algolia_instant_css:# Assetscss: cssjs: jsimages: images# Theme versionversion: 5.1.0]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo图床:七牛+Chrome+极简图床插件]]></title>
      <url>%2F2016%2F11%2F30%2Fqn-jjtc%2F</url>
      <content type="text"><![CDATA[这个工具对于我来说还是挺重要的，目前使用ATOM编写markdown文档是无法直接将图片贴到文档内的。有同事将图片上传到百度云后，通过分享获取图片链接，这样做对于我来说太过麻烦，而且时间成本相当的高。为了解决这个比较麻烦的操作，我借鉴之前他们使用七牛免费储存的功能，再结合我之前使用的chrome插件——极简图床，配置了一个比较便捷的图片上传和调用工具。这篇文档的图片就是使用的这种方式。 1 概述&emsp;&emsp;在hexo blog中使用markdown编写文档，插入的图片的方式为：1![picture_title](picture_url) &emsp;&emsp;所以需要找一个网络存储存放相关的图片，并生成一个有效的链接进行调用。这里选择七牛的对象存储，存放和调用图片（一定范围内是免费的）。 2 七牛云存储&emsp;&emsp;在七牛先注册一个账号，登陆后建立对象存储。&emsp;&emsp;“测试域名”在极简图床插件中需要使用到。 3 极简图床插件&emsp;&emsp;打开Chrome浏览器，在插件商店添加“极简图床”，打开后点击右上角的“设置”，将你的七牛对象存储配置到上面。说明： 空间名称：可以自定义，没有特殊要求。 AK和SK：在图3中，七牛账号里寻找，路径：“个人面板-&gt;个人中心-&gt;密钥管理”。 域名：如果没有个人域名就填写图1中的“测试域名”，有个人域名建议使用个人域名。 4 使用步骤 将本地需要配置到文章中的图片，拖入Chrome的极简图床窗口； 按照提示：“粘贴、拖动或点此选择图片上传”即可将图片上传到你的七牛对象存储中，并生成相应的图片链接； 在“我的上传”中，找到需要插入的图片资源，复制的相应的url，根据Markdown的语法调用即可； 5 总结&emsp;&emsp;整个的操作很简单，可能Chrome的极简图床插件需要连接下VPN。个人比较喜欢使用“Hexo+七牛+Chrome+极简图床插件”，因为这全都是免费的。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo基础]]></title>
      <url>%2F2016%2F11%2F29%2Fhexo-bases%2F</url>
      <content type="text"><![CDATA[在mac上安装了hexo后的一些学习心得和总结，主要是对主配置文件（_config.yml)和hexo操作命令的一些总结，以便以后能快速回顾。踩了很多坑，不过整体的东西还是出来了。有了框架，剩下的就慢慢添加吧！ 1 Hexo安装12345678# 安装npm install hexo -g# 升级npm update hexo -g# 初始化,可以指定初始化的目录hexo init &quot;dir_name&quot; 2 基础配置2.1 添加标签页面12345678910111213141516# 建立标签页面cd hexo-sitehexo new page tags# 设置页面类型title: 标签date: 2016-11-29 12:12:12type: &quot;tags&quot;---# 修改菜单,并设置该页禁用标签功能menu: home: / archives: /archives tags: /tags comments: false 2.2 添加分类页面12345678910111213141516# 建立分类页面cd hexo-sitehexo new page categories# 设置页面类型title: 分类date: 2016-11-29 12:12:12type: &quot;categories&quot;---# 修改菜单，并设置该页面禁用标签功能menu: home: / archives: /archives categories: /categories comments: false 3 基础操作命令3.1 新建文章12345#新建文章hexo n &quot;article_name&quot; == hexo new &quot;article_name&quot;#草稿hexo p &quot;article_name&quot; == hexo publish &quot;article_name&quot; 3.2 部署文章123456789101112131415#清理缓存hexo clean#生成静态页面到public目录hexo g == hexo generate#启动服务预览，可以在后面添加“--debug”参数hexo s == hexo server#部署到githubhexo d == hexo deploy#可以将部署简写hexo generate --deployhexo deploy --generate 3.3 服务器命令1234567891011#Hexo监视文件变动并自动更新，无须重启hexo server#静态模式hexo server -s#更改端口hexo server -p 5000#自定义iphexo server -i 192.168.1.1]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo主配置文件详解]]></title>
      <url>%2F2016%2F11%2F29%2Fhexo-config%2F</url>
      <content type="text"><![CDATA[主配置文件主要控制着一些标题、侧边栏和页面开头。主要的一些样式我个人还是必将倾向于使用next主题，加上它的三个排版样式，让我有很过的选择空间，另外还能通过修改相关的样式，美化整体的页面等。 1 注意事项 配置文件中，冒号(:)后面一定需要加空格 Hexo官方配置说明 配置文件路径：hexo的目录下的config.yml文件 2 配置文件详解123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 网站信息# 标题title: AllenKe Blog# 头像avatar: /images/avatar.jpg# 副标题subtitle: 技术学习文档汇总# 网站描述description: 不忘初心，方能终始# 作者昵称author: AllenKe# 网站语言；默认英语language: zh-Hans# 时区；默认电脑时区#timezone: Asia/Shanghaitimezone:# URL 网址设置## 如果网站是放在子目录中，将url设置成'http://yoursite.com/child'，将root设置成'/child/'## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'# 网址 url: http://yoursite.com# 网站根目录。如果网站是放在子目录中，将root设置城‘子目录’root: /# 文章链接地址格式。即文章的存放目录permalink: :year/:month/:day/:title/permalink_defaults:# Directory 目录设置# 资源文件夹：里面的文件会上传到Githubsource_dir: source# 公共文件夹：存放生成的静态文件public_dir: public# 标签文件夹：默认是tages；实际路径是source/tagstag_dir: tagsrss_dir: rss# 档案文件夹：默认是archivesarchive_dir: archives# 分类文件夹：默认是categories；实际存放在source/categoriescategory_dir: categories# 代码文件夹：默认是downloads/codecode_dir: downloads/code# 国际化文件夹：默认与language相同i18n_dir: :lang# 不需要渲染的文件夹或文件夹，放在[]中# 这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过skip_render:# Writing 写作选项# 新建博文的默认名称# File name of new postsnew_post_name: :title.md# 默认布局模版是post，而不是draft或pagedefault_layout: post# 是否将标题转换成标题形式，首字母大写titlecase: false # Transform title into titlecase# 在新标签页面中打开网页external_link: true # Open external links in new tabfilename_case: 0# 食肉渲染草稿，默认是false，打开后可以阅览草稿render_drafts: true# 启动Asset文件夹post_asset_folder: false# 把链接改为与根目录的相对位置relative_link: false# 显示未来的文章future: true#代码块设置highlight: # 使用代码高亮 enable: true # 显示行号 line_number: true # 自动检查语言 auto_detect: false tab_replace:# Category &amp; Tag 分类和标签# 默认分类default_category: uncategorized# 分类别名category_map:# 标签别名tag_map:# Date / Time format 日期和时间格式## Hexo uses Moment.js to parse and display date## Hexo使用Moment.js 来解析和显示时间## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination 分页设置# ---------------下面选项需要对应插件的支持---------------# npm install hexo-generator-index --save# npm install hexo-generator-archive --save# npm install hexo-generator-category --save# npm install hexo-generator-tag --save## Set per_page to 0 to disable pagination# 设置每页显示的文章量per_page: 10# 首页的分页设置#index_generator:# per_page: 5# 归档页的分页设置#archive_generator:# per_page: 30# yearly: true# monthly: true# 标签页的分页设置#tag_generator:# per_page: 20# 分页路径，在public 中可以查看pagination_dir: page# Extensions 拓展插件配置## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/# 选择主题，前提需将主题下载至hexo根目录下# theme: landscapetheme: next# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/allenouyangke/allenouyangke.github.io.git branch: master# Duoshuo_system 多说评论系统调用duoshuo_shortname: allenouyangke# Content sharing services 分享系统# JiaThis_sharejiathis: true# Baidu_sharebaidushare: true# Duoshuo_shareduoshuo_share: true# 配置RSS#feed: #feed 类型 (atom/rss2) #type: atom #rss 路径 #path: atom.xml #在 rss 中最多生成的文章数(0显示所有) #limit: 0# Local Search# 自定义站点内容搜索# 需要先安装插件：# npm install hexo-generator-search --savesearch: path: search.xml # 只想设置所以文章可设置城post；默认是all； field: post]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS初始化]]></title>
      <url>%2F2016%2F11%2F29%2Finit-sys%2F</url>
      <content type="text"><![CDATA[基本上的对目前游戏运维工作的一些汇总，平时拿到服务器后，主要就是通过修改一下内容对服务器进行初始化操作。虽然我知道这仅仅是一些皮毛，但暂且还是将它记下来。&lt;–!more–&gt; 实践环境 CentOS 6.7 minimal VMware workstation 12 初始化内容针对虚拟机的网卡设置（新系统不需要） 由于完全克隆的虚拟机物理网卡会有变更，刚克隆完成后需要重新设置HWADDR，可以执行以下脚本自动完成； 12345678910111213141516171819202122232425#Author: AllenKe.#Description: 用于设置完全克隆后的虚拟机物理网卡.#ifcfg-eth0和70-persistent-net.rules两个文件的路径netcard=/etc/sysconfig/network-scriptsnetrule=/etc/udev/rules.d#提取两个文件中mac地址信息macadd=`cat $netrule/70-persistent-net.rules | awk -F &quot;;&quot; &apos;&#123;print $4&#125;&apos; | awk -F &quot;\&quot;&quot; &apos;&#123;print $2&#125;&apos;`netadd=`cat /etc/sysconfig/network-scripts/ifcfg-eth0 | grep HWADDR | awk -F &quot;=&quot; &apos;&#123;print $2&#125;&apos;`#将ifcfg-eth0文件中的HWADDR额无力地址替换成70-persistent-net.rules文件中eth1的mac地址sed -i &quot;s/$netadd/$macadd/g&quot; /etc/sysconfig/network-scripts/ifcfg-eth0#判断新的mac地址是否应已经替换成功if [ $? -eq 0 ];then echo &quot;Change successful!&quot; rm -rf $netrule/70-persistent-net.ruleselse echo &quot;Not change the macaddress!&quot;fi#输入任意键进行重启pauseshutdown -r now 修改主机名 永久修改 12345678910#进入/etc/sysconfig/network，修改HOSTNAME参数cat /etc/sysconfig/network NETWORKING=yes HOSTNAME=allenke.allenke#执行hostname命令hostname allenke#重启／注销服务器shutdown -r now 临时修改 1234#直接执行hostnamehostname allenke#ctrl+d注销／重启 关闭selinux1234567891011#进入selinux配置文件vi /etc/selinux/config#将SELINUX=enforcing修改如下，然后保存退出SELINUX=disabled#设置SELinux状态setenforce 0#获取selinux状态getenforce 安装基础服务1yum install gcc gcc-c++ vim ntpdate wget -y 设置时间定时同步 在基础服务中已经安装了ntpdate 123456#找到公网／内网ntp服务器域名／IP，执行ntpdate/usr/sbin/ntpdate 0.cn.pool.ntp.org#设置每天凌晨00:00自动同步crontab -l0 */1 * * * /usr/sbin/ntpdate 0.cn.pool.ntp.org &gt;&gt; /var/log/ntpdate.log 设置别名 永久修改 123456789101112131415#在当前用户下操作cat ~/.bashrc # .bashrc # User specific aliases and functions alias rm=&apos;rm -i&apos; alias cp=&apos;cp -i&apos; alias mv=&apos;mv -i&apos; alias vi=&apos;vim&apos; # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi 临时修改 123456#直接执行命令aliasalias vi=&apos;vim&apos;#个人习惯，调整vim的字体颜色tail -1 /etc/vimrc highlight Comment ctermfg=green guifg=green history记录设置 处于安全考虑，个人习惯有输出操作的时间等信息 1234567891011#进入到/etc/bashrc，将4条语句添加到最后一行vi /etc/bashrc#保存命令的记录总数HISTFILESIZE=4000#输出记录的总数HISTSIZE=4000#时间显示的格式HISTTIMEFORMAT=&apos;%F %T &apos;#做为history的时间变量将值传递给history命令export HISTTIMEFORMAT 默认语言设置1234#设置中文或英文cat /etc/sysconfig/i18n #LANG=&quot;zh_CN.UTF-8&quot; LANG=&quot;en_US.UTF-8&quot;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基于Mac的hexo+github page搭建]]></title>
      <url>%2F2016%2F11%2F28%2Fhexo-github%2F</url>
      <content type="text"><![CDATA[在MacBook上搭建自己的Hoxe+Github page，将Hexo作为未来学习总结的一个平台，并将相关的学习内容保存和分享。 1 配置SSH-key 步骤一 检查SSH key是否存在 1ls -al ~/.ssh 步骤二 生成SSH key 1ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 步骤三 添加SSH key到Github登陆Github，寻找顺序：Github -&gt; Settings -&gt; SSH and GPS keys 1234#在Mac上执行命令，查看密钥信息cat ~/.ssh/id_rsa.pub#将相应的密钥添加到SSH and GPS keys上 步骤四 测试Mac与Github是否连通 12345ssh git@github.com#PTY allocation request failed on channel 0#Hi allenouyangke! You&apos;ve successfully authenticated, but GitHub does not provide shell access.#Connection to github.com closed. 2 安装Node.js Node.js是一个Javascript运行环境(runtime)。在这里用于生成静态页面。 步骤一 下载安装登陆Node.js官网 下载稳定版本安装即可。 步骤二 验证安装和版本123node --version#v6.9.1 3 安装Git Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。在这里用来将本地Hexo内容提交到Github上。 步骤一 Mac中，Xcode自带Git，在apple store下载安装即可使用。 步骤二 验证安装和版本123git --version#git version 2.9.3 (Apple Git-75) 4 安装Hexo 完成以上步骤后，就可以开始安装hexo了。 步骤一 终端下执行安装命令 1sudo npm install -g hexo-cli 步骤二 初始化进入到hexo的安装目录，进行初始化。 1hexo init &quot;your_dir_name&quot; 步骤三 开启hexo 1234hexo s#在浏览器中输入：http://localhost:4000或http://127.0.0.1:4000，能显示出hexo主页即安装完成#已经实现了本地的访问 5 配置Github 步骤一 创建hexo的项目Github -&gt; New repository -&gt; “rep_name:需要跟github账号的名称一致” 步骤二 同步hexo到github12345678910#进入到hexo的目录下#清理缓存文件（db.json）和已经生成的静态文件（publice）hexo clean#生成缓存和静态文件hexo g#重新部署到服务器（github）hexo d]]></content>
    </entry>

    
  
  
</search>
